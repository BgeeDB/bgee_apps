/**
 * Provides Parameter object instances, each represents a parameter that 
 * can be included in URLs that are sent to, or generated by the webapp.
 * These Parameter instances contain information about the parameter usage,
 * such as its name, format, number of values allowed, etc.
 * 
 * It is also used by a request parameter (see requestparameters.js) as 
 * key to store the actual value(s) bound to this parameter in a table
 * Indeed, these Parameter objects do not store directly the value(s) its
 * corresponding parameter can take
 * 
 * It is an object literal that cannot be instantiated. It has to be
 * initialized once by calling the method init() before being used.
 *
 * @author  Mathieu Seppey
 * @version Bgee 13 Aug 2014
 * @since   Bgee 13
 **/
var urlParameters = {

        /**
         * Constructor
         *                                                                                    
         * @param name                    A {@code String} that is the name of the parameter
         *                                as seen in an URL
         * @param allowsMultipleValues    A {@code Boolean} that indicates whether 
         *                                the parameter accepts multiple values.
         * @param isStorable              A {@code boolean} defining whether the parameter 
         *                                is storable.
         * @param isSecure                A {@code boolean} defining whether the parameter 
         *                                is secure.
         * @param maxSize                 An {@code int} that represents the maximum number 
         *                                of characters allowed for this parameter
         * @param format                  A {@code String} that contains the regular expression 
         *                                that this parameter has to fit to.
         * @param type                    The data type of the value 
         *                                
         **/
        Parameter: function(name,allowsMultipleValues,isStorable,isSecure,maxSize,format,type) {
            this.name = name ;
            this.allowsMultipleValues = allowsMultipleValues;
            this.isStorable = isStorable ;
            this.isSecure = isSecure ;
            this.maxSize = maxSize ;
            this.format = format ;
            this.type = type ;
        },

        /**
         * Initialization of all Parameters allowed in Bgee
         **/
        init: function(){
            this.list = [];
            this.PAGE = new urlParameters.Parameter('page',false,false,false,128,null,'string');
            this.list.push(this.PAGE);
            this.ACTION = new urlParameters.Parameter('action',false,false,false,128,null,'string');
            this.list.push(this.ACTION);
            this.ALL_ORGANS = new urlParameters.Parameter('all_organs',false,true,false,128,null,'boolean');
            this.list.push(this.ALL_ORGANS);
            this.CHOSEN_DATA_TYPE = new urlParameters.Parameter('chosen_data_type',false,true,false,128,null,'number');
            this.list.push(this.CHOSEN_DATA_TYPE);
            this.EMAIL = new urlParameters.Parameter('email',false,true,false,128,/^[_A-Za-z0-9-]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9-]+)*(\.[A-Za-z]{2,})$/,'string');
            this.list.push(this.EMAIL);
            this.STAGE_CHILDREN = new urlParameters.Parameter('stage_children',false,true,false,128,null,'boolean');
            this.list.push(this.STAGE_CHILDREN);
            this.DISPLAY_TYPE = new urlParameters.Parameter('display_type',false,false,false,128,null,'string');
            this.list.push(this.DISPLAY_TYPE);
            this.DATA = new urlParameters.Parameter('data',false,false,false,128,null,'string');
            this.list.push(this.DATA);
        },

        /**
         * @return    The parameter page
         */
        getParamPage: function(){
            return this.PAGE;
        },
        /**
         * @return    The parameter action
         */
        getParamAction: function(){
            return this.ACTION;
        },
        /**
         * @return    The parameter all_organs
         */
        getParamAllOrgans: function(){
            return this.ALL_ORGANS;
        },
        /**
         * @return    The parameter chosen_data_type
         */
        getParamChosenDataType: function(){
            return this.CHOSEN_DATA_TYPE;
        },
        /**
         * @return    The parameter email
         */
        getParamEmail: function(){
            return this.EMAIL;
        },
        /**
         * @return    The parameter stage_children
         */
        getParamStageChildren: function(){
            return this.STAGE_CHILDREN;
        },
        /**
         * @return    The parameter display_type
         */
        getParamDisplayType: function(){
            return this.DISPLAY_TYPE;
        },
        /**
         * @return    The parameter data
         */
        getParamData: function(){
            return this.DATA;
        },
        /**
         * @return An {@code Array} that lists all declared {@code Parameter}
         */
        getList: function() {
            return this.list;
        }

};
