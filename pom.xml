<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                       http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.bgee</groupId>
	<artifactId>bgee-applications</artifactId>
	<packaging>pom</packaging>
	<version>13</version>
	<name>Bgee</name>
	<url>http://www.bgee.org/</url>
	<description>Bgee allows to automatically compare gene expression patterns between species, by referencing expression data on anatomical ontologies, and designing homology relationships between them.</description>
	<organization>
		<name>Evolutionary Bioinformatics Group - 
            Swiss Institute of Bioinformatics - 
            Department of Ecology and Evolution - 
            University of Lausanne</name>
		<url>http://bioinfo.unil.ch/</url>
	</organization>
	<developers>
		<developer>
			<name>Frederic Bastian</name>
			<email>frederic.bastian@unil.ch</email>
		</developer>
	</developers>
	<contributors>
		<contributor>
			<name/>
			<email/>
		</contributor>
	</contributors>
	<mailingLists>
		<mailingList>
			<name>bgee@isb-sib.ch</name>
		</mailingList>
	</mailingLists>
	
	<parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>7</version>
    </parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
        <!-- We create the property skip.surefire.tests to override the property 
             skipTests of the surefire plugin. This is because using skipTests=true 
             also skips integration tests, while we would like to be able to run 
             integration tests and to skip unit tests. So, to skip unit test, 
             we would use the property skip.surefire.tests=true.
             But in that case, using skipTests=true would not skip unit tests 
             anymore. So we default skip.surefire.tests to skipTests, and 
             everything is back to normal, we just have a new additional property 
             allowing to skip unit tests but not integration tests.
             See http://stackoverflow.com/a/17932772/1768736 -->
        <skip.surefire.tests>${skipTests}</skip.surefire.tests>
		
		<!-- The following properties are used for integration tests -->
		
        <!-- Define here the JDBC Driver class name and connection URL 
             for the sql-maven-plugin and for integration test classes. -->
        <bgee.jdbc.driver.className>com.mysql.jdbc.Driver</bgee.jdbc.driver.className>
        <!-- Do not put the database name nor any query string parameters, e.g., 
             jdbc:mysql://[host][,failoverhost...][:port]/ -->
        <bgee.jdbc.connectionURL>jdbc:mysql://127.0.0.1/</bgee.jdbc.connectionURL> 
        <!-- A prefix that all test database name should start with. This is to allow 
             to drop them all after integration tests, even those created by the Java application 
             and not dropped because of execution errors. -->
        <bgee.database.name.prefix>bgeeIntegrationTest_</bgee.database.name.prefix>
        <!-- here, we provide the name of the test Bgee database that should be 
             populated with test data for integration tests of SELECT statements. 
             Note that the name of this database must start with bgee.database.name.prefix, 
             to be properly dropped by the sql-maven-plugin -->
        <bgee.database.test.select.name>${bgee.database.name.prefix}select</bgee.database.test.select.name>
        <!-- here, we provide the name of the empty test Bgee database, used to proceed to 
             INSERT/UPDATE integration tests. This test database will be used by integration 
             tests not overlapping. For integration tests that potentially use the same tables, 
             they will create their own database instance (still with a name starting with 
             bgee.database.name.prefix).
             Note that the name of this database must start with bgee.database.name.prefix, 
             to be properly dropped by the sql-maven-plugin -->
        <bgee.database.test.insert.name>${bgee.database.name.prefix}insert</bgee.database.test.insert.name>
        
        <!-- Here we provide the paths to the SQL files to create the Bgee database -->
        <bgee.database.file.schema>
            ${basedir}/../../pipeline/pipeline/db_creation/bgeeSchema.sql
        </bgee.database.file.schema>
        <bgee.database.file.constraint>
	        ${basedir}/../../pipeline/pipeline/db_creation/bgeeConstraint.sql
        </bgee.database.file.constraint>
	    <bgee.database.file.index>
		    ${basedir}/../../pipeline/pipeline/db_creation/bgeeIndex.sql
	    </bgee.database.file.index>
	    <bgee.database.file.foreignkey>
		    ${basedir}/../../pipeline/pipeline/db_creation/bgeeForeignKey.sql
	    </bgee.database.file.foreignkey>
	    
        <!-- and here, the path to the dump file containing the test data, used 
             to populate the database used for integration tests of SELECT statements -->
        <bgee.database.file.dump.test>
            ${basedir}/src/test/resources/sql/testDataDump.sql
        </bgee.database.file.dump.test>
        <!-- Here we provide the path to a SQL file defining and calling a procedure 
             to drop all databases used for integration tests. -->
        <bgee.database.file.drop.procedure>
            ${basedir}/src/test/resources/sql/dropTestDatabases.sql
        </bgee.database.file.drop.procedure>
        
	</properties>

	<repositories>
		<repository>
			<id>bgee-local-repository</id>
			<url>file://${basedir}/../m2_local_repository/repository</url>
		</repository>
	</repositories>

	<modules>
		<module>bgee-core</module>
        <module>bgee-dao-api</module>
        <module>bgee-dao-sql</module>
        <module>bgee-pipeline</module>
        <module>bgee-webapp</module>
  </modules>

	<!-- Dependencies needed for *all* sub-projects -->
	<dependencies>
        <!-- Logging system -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.0-beta7</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.0-beta7</version>
			<scope>compile</scope>
		</dependency>

        <!-- General useful library (e.g., defines StringUtils) -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.1</version>
            <scope>compile</scope>
        </dependency>
        
        <!-- Unit testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
        <!-- Mock object during unit testing -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<!-- Dependencies needed for some sub-projects -->
	<dependencyManagement>
		<dependencies>

			<!-- Needed for the pipeline -->
			<!-- Includes OWLools-Core, OBO2OWL, OWLAPI -->
			<dependency>
				<groupId>org.bbop</groupId>
				<artifactId>OWLTools-all</artifactId>
				<version>0.2.1-SNAPSHOT</version>
				<scope>compile</scope>
			</dependency>
			<!-- Used to generate our custom NCBI taxonomy ontology -->
            <dependency>
                <groupId>org.bbop</groupId>
                <artifactId>OWLTools-ncbi</artifactId>
                <version>0.2.1-SNAPSHOT</version>
                <scope>compile</scope>
            </dependency>
            <!-- Used to least common ancestors of species used in Bgee -->
            <dependency>
                <groupId>org.bbop</groupId>
                <artifactId>OWLTools-sim</artifactId>
                <version>0.2.1-SNAPSHOT</version>
                <scope>compile</scope>
            </dependency>
            
            <!-- To parse the OMA HOG data file -->
			<dependency>
				<groupId>sbc</groupId>
				<artifactId>orthoxml</artifactId>
				<version>0.1b</version>
				<scope>compile</scope>
			</dependency>
			
			<!-- To parse CSV/TSV files -->
			<dependency>
                <groupId>net.sf.supercsv</groupId>
                <artifactId>super-csv</artifactId>
                <version>2.1.0</version>
                <scope>compile</scope>
            </dependency>
			<!-- End for pipeline -->

			<!-- Needed for the webapp -->
			<dependency>
				<groupId>org.apache.tomcat</groupId>
				<artifactId>tomcat-servlet-api</artifactId>
				<version>7.0.35</version>
				<scope>provided</scope>
			</dependency>
			<!-- End for webapp -->

			<!-- Needed for the core layer -->
			<!-- Used to generate hashes -->
			<dependency>
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>
				<version>1.8</version>
				<scope>compile</scope>
			</dependency>

			<!-- End for the core layer -->
			
			<!-- Needed for the dao-api layer -->
			
            
			<!-- End for the dao-api layer -->

			<!-- Needed for the dao-sql layer -->
			<!-- JDBC logging library -->
			<dependency>
				<groupId>org.bgee.log4jdbc-log4j2</groupId>
				<artifactId>log4jdbc-log4j2-jdbc4.1</artifactId>
				<version>1.15</version>
				<scope>compile</scope>
			</dependency>
			<!-- The JDBC connector -->
			<dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.27</version>
                <scope>compile</scope>
            </dependency>
		    
			<!-- End for the dao-sql layer -->
			
			<!-- Used for integration test using a real MySQL database. --> 
			<!-- Spring framework is used to execute the .sql files to create the database. -->
			<dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-test</artifactId>
                <version>3.2.5.RELEASE</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jdbc</artifactId>
                <version>3.2.5.RELEASE</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>3.2.5.RELEASE</version>
                <scope>test</scope>
            </dependency>

		</dependencies>
	</dependencyManagement>

	<build>
        <!-- plugins needed for ALL sub-modules -->
		<plugins>
            <!-- in order to compile with JDK 1.7 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			
			<!-- unit tests -->
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.14.1</version>
                <configuration>
                    <!-- Property createe to skip surefire tests without skipping failsafe tests.
                         Property value is default to skipTests so that we can still skip 
                         unit tests by using skipTests. See the documentation of the property 
                         skip.surefire.tests in this file for more details. -->
                    <skipTests>${skip.surefire.tests}</skipTests>
                </configuration>
            </plugin>
            
            <!-- Generates sources and javadoc -->
            <plugin>
	          <groupId>org.apache.maven.plugins</groupId>
	          <artifactId>maven-source-plugin</artifactId>
              <version>2.2.1</version>
	          <executions>
		        <execution>
			      <id>attach-sources</id>
			      <goals>
				    <goal>jar</goal>
			      </goals>
		        </execution>
	         </executions>
           </plugin>
            <plugin>
	          <groupId>org.apache.maven.plugins</groupId>
	          <artifactId>maven-javadoc-plugin</artifactId>
              <version>2.9.1</version>
	          <executions>
		        <execution>
			      <id>attach-javadocs</id>
			      <goals>
				    <goal>jar</goal>
				    <goal>aggregate</goal>
			      </goals>
		        </execution>
	         </executions>
           </plugin>
		</plugins>
		
		
		<!-- Plugins needed for some sub-modules -->
		<pluginManagement>
		  <plugins>
		  
            <!-- ******************** Integration tests *********************** -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.16</version>
                
                <configuration>
                    <systemPropertyVariables>
                        <!-- Provides the System properties that the Bgee applications will use 
                             to connect to a MySQL database as root during integration tests -->
                             
                        <!-- username and password should be provided in your settings.xml file, 
                             the other properties are defined in this pom.xml file. -->
                        <bgee.dao.jdbc.username>${bgee.database.root.username}</bgee.dao.jdbc.username>
                        <bgee.dao.jdbc.password>${bgee.database.root.password}</bgee.dao.jdbc.password>
                        <!-- Besides the usual database connector, we also use the log4jdbc-log4j2 Driver, 
                             as logging SQL queries will be useful -->
                        <bgee.dao.jdbc.driver.names>
                            ${bgee.jdbc.driver.className},net.sf.log4jdbc.sql.jdbcapi.DriverSpy
                        </bgee.dao.jdbc.driver.names>
                        <!-- The connection URL is modified to use log4jdbc-log4j2 -->
                        <bgee.dao.jdbc.url>jdbc:log4${bgee.jdbc.connectionURL}</bgee.dao.jdbc.url>
                        
                        <!-- Name of the database populated with test data for test 
                             of SELECT statements -->
                        <bgee.database.test.select.name>
                            ${bgee.database.test.select.name}
                        </bgee.database.test.select.name>
                        <!-- Name of the empty database used for testing of independent 
                             INSERT statements -->
                        <bgee.database.test.insert.name>
                            ${bgee.database.test.insert.name}
                        </bgee.database.test.insert.name>
                        
                        <!-- Here we provide the path to the SQL file to create the Bgee database. 
                             This will be used by integrationt tests that need to create their own 
                             database instance for INSERT testing. -->
                        <bgee.database.file.schema>${bgee.database.file.schema}</bgee.database.file.schema>
                        <!-- And we provide the prefix that should be used to name all test 
                             databases created during the tests -->
                        <bgee.database.name.prefix>${bgee.database.name.prefix}</bgee.database.name.prefix>
                        
                    </systemPropertyVariables>
                </configuration>
                
                <executions>
                     <execution>
                          <id>integration-test</id>
                          <goals>
                              <goal>integration-test</goal>
                              <goal>verify</goal>
                          </goals>
                      </execution>
                </executions>
            </plugin>
            
            <!-- sql-maven-plugin used during the pre-integration-test and 
                 post-integration-test phases of the Maven Failsafe Plugin. 
                 This allows to initialize or clean the MySQL databases for integration 
                 tests using a real MySQL database. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>sql-maven-plugin</artifactId>
                <version>1.5</version>
                <dependencies>
                    <!-- include the JDBC driver dependency here -->
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.27</version>
                    </dependency>
                </dependencies>
                
                <!-- common plugin configuration -->
                <configuration>
                    <!-- driver and url defined in this pom.xml -->
                    <driver>${bgee.jdbc.driver.className}</driver>
                    <!-- the URL should not include any database name, see this property 
                         comments for more details -->
                    <url>${bgee.jdbc.connectionURL}</url>
                    <!-- username and password should be defined in your settings.xml file -->
                    <username>${bgee.database.root.username}</username>
                    <password>${bgee.database.root.password}</password>
                </configuration>
                
                <executions>
                    <!-- **************************************
                         Executions bound to the pre-integration-test phase 
                         of the maven-failsafe-plugin 
                         ************************************** -->
                    <!-- Drop any potential test database still existing (it should not) -->
                     <execution>
                         <id>pre-integration-test-drop-dbs</id>
                         <phase>pre-integration-test</phase>
                         <goals>
                             <goal>execute</goal>
                         </goals>
                         <configuration>
                             <!-- we use the test database here, as we need to attach our procedure 
                                  to drop all test databases to an existing database -->
                             <url>${bgee.jdbc.connectionURL}test</url>
                             <autocommit>true</autocommit>
                             <delimiterType>row</delimiterType>
                             <!-- the variable @bgeeTestDBPrefix allows to provide the prefix 
                                  of the name of the test databases. Its default is 'bgeeIntegrationTest_'.
                                  It is possible to do that because, by chance, the sql-maven-plugin 
                                  executes sqlCommand before srcFiles, but this might maybe change 
                                  someday...-->
                             <sqlCommand>SET @bgeeTestDBPrefix='${bgee.database.name.prefix}'</sqlCommand>
                             <srcFiles>
                                 <srcFile>${bgee.database.file.drop.procedure}</srcFile>
                             </srcFiles>
                         </configuration>
                     </execution>
                     
                     <!-- Create the database used to test independent INSERT statements, 
                          and the database used to test SELECT statements that will be 
                          populated with data. -->
                     <execution>
                         <id>pre-integration-test-create-dbs</id>
                         <phase>pre-integration-test</phase>
                         <goals>
                             <goal>execute</goal>
                         </goals>
                         <configuration>
                             <autocommit>true</autocommit>
                             <sqlCommand>
                                 CREATE DATABASE ${bgee.database.test.insert.name};
                                 CREATE DATABASE ${bgee.database.test.select.name};
                             </sqlCommand>
                         </configuration>
                     </execution>
                     
                     <!-- Populate the database used to test INSERT statements 
                          (only the tables are inserted). -->
                     <execution>
                         <id>pre-integration-test-populate-insert-db</id>
                         <phase>pre-integration-test</phase>
                         <goals>
                             <goal>execute</goal>
                         </goals>
                         <configuration>
                             <!-- change the URL to use the database -->
                             <url>${bgee.jdbc.connectionURL}${bgee.database.test.insert.name}</url>
                             <autocommit>true</autocommit>
                             <srcFiles>
                                 <srcFile>${bgee.database.file.schema}</srcFile>
                             </srcFiles>
                         </configuration>
                     </execution>
                     
                     <!-- Populate the database used to test SELECT statements. -->
                     <execution>
                         <id>pre-integration-test-populate-select-db</id>
                         <phase>pre-integration-test</phase>
                         <goals>
                             <goal>execute</goal>
                         </goals>
                         <configuration>
                             <!-- change the URL to use the database -->
                             <url>${bgee.jdbc.connectionURL}${bgee.database.test.select.name}</url>
                             <autocommit>true</autocommit>
                             <srcFiles>
                                 <srcFile>${bgee.database.file.schema}</srcFile>
                                 <srcFile>${bgee.database.file.dump.test}</srcFile>
                                 <srcFile>${bgee.database.file.constraint}</srcFile>
                                 <srcFile>${bgee.database.file.index}</srcFile>
                                 <srcFile>${bgee.database.file.foreignkey}</srcFile> 
                             </srcFiles>
                         </configuration>
                     </execution>
                     
                     
                    <!-- **************************************
                         Executions bound to the post-integration-test phase 
                         of the maven-failsafe-plugin 
                         ************************************** -->
                     <!-- Drop the test databases, including those that might have been created 
                          by the Java integration tests. -->
                     <execution>
                         <id>post-integration-test-drop-db</id>
                         <phase>post-integration-test</phase>
                         <goals>
                             <goal>execute</goal>
                         </goals>
                         <configuration>
                             <!-- we use the test database here, as we need to attach our procedure 
                                  to drop all test databases to an existing database -->
                             <url>${bgee.jdbc.connectionURL}test</url>
                             <autocommit>true</autocommit>
                             <delimiterType>row</delimiterType>
                             <!-- the variable @bgeeTestDBPrefix allows to provide the prefix 
                                  of the name of the test databases. Its default is 'bgeeIntegrationTest_'.
                                  It is possible to do that because, by chance, the sql-maven-plugin 
                                  executes sqlCommand before srcFiles, but this might maybe change 
                                  someday...-->
                             <sqlCommand>SET @bgeeTestDBPrefix='${bgee.database.name.prefix}'</sqlCommand>
                             <srcFiles>
                                 <srcFile>${bgee.database.file.drop.procedure}</srcFile>
                             </srcFiles>
                         </configuration>
                     </execution>
                     
                 </executions>
            </plugin>
            <!-- *******************// END Integration tests ********************* -->
            
          </plugins>
		</pluginManagement>
	</build>

</project>