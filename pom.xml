<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                       http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.bgee</groupId>
    <artifactId>bgee-applications</artifactId>
    <packaging>pom</packaging>
    <version>13</version>
    <name>Bgee</name>
    <url>http://www.bgee.org/</url>
    <description>Bgee allows to automatically compare gene expression patterns between species, by referencing expression data on anatomical ontologies, and designing homology relationships between them.</description>
    <organization>
        <name>Evolutionary Bioinformatics Group - 
            Swiss Institute of Bioinformatics - 
            Department of Ecology and Evolution - 
            University of Lausanne</name>
        <url>http://bioinfo.unil.ch/</url>
    </organization>
    <developers>
        <developer>
            <name>Frederic Bastian</name>
            <email>frederic.bastian@unil.ch</email>
        </developer>
        <developer>
            <name>Valentine Rech de Laval</name>
            <email>Valentine.RechdeLaval@isb-sib.ch</email>
        </developer>
    </developers>
    <contributors>
        <contributor>
            <name />
            <email />
        </contributor>
    </contributors>
    <mailingLists>
        <mailingList>
            <name>bgee@isb-sib.ch</name>
        </mailingList>
    </mailingLists>

    <parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>7</version>
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- We create the property skip.surefire.tests to override the property 
            skipTests of the surefire plugin. This is because using skipTests=true also 
            skips integration tests, while we would like to be able to run integration 
            tests and to skip unit tests. So, to skip unit test, we would use the property 
            skip.surefire.tests=true. But in that case, using skipTests=true would not 
            skip unit tests anymore. So we default skip.surefire.tests to skipTests, 
            and everything is back to normal, we just have a new additional property 
            allowing to skip unit tests but not integration tests. See http://stackoverflow.com/a/17932772/1768736 -->
        <skip.surefire.tests>${skipTests}</skip.surefire.tests>
        <skipITs>${skipTests}</skipITs>

    </properties>

    <repositories>
        <repository>
            <id>bgee-local-repository</id>
            <url>file://${basedir}/../m2_local_repository/repository</url>
        </repository>
        <repository>
            <id>terracotta-repository</id>
            <url>http://www.terracotta.org/download/reflector/releases</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <modules>
        <module>bgee-core</module>
        <module>bgee-dao-api</module>
        <module>bgee-dao-sql</module>
        <module>bgee-pipeline</module>
        <module>bgee-webapp</module>
    </modules>

    <!-- Dependencies needed for *all* sub-projects -->
    <dependencies>
        <!-- Logging system -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.0.2</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.0.2</version>
            <scope>compile</scope>
        </dependency>

        <!-- General useful library (e.g., defines StringUtils) -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.1</version>
            <scope>compile</scope>
        </dependency>

        <!-- Unit testing -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <!-- Mock object during unit testing -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>1.9.5</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <!-- Dependencies needed for some sub-projects -->
    <dependencyManagement>
        <dependencies>

            <!-- bgee-dao-api, used by many modules -->
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>bgee-dao-api</artifactId>
                <version>${project.version}</version>
                <scope>compile</scope>
            </dependency>
            <!-- test classes from bgee-dao-pi, used by any module using 
                DAOs -->
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>bgee-dao-api</artifactId>
                <version>${project.version}</version>
                <type>test-jar</type>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>bgee-dao-sql</artifactId>
                <version>${project.version}</version>
                <scope>compile</scope>
            </dependency>


            <!-- Needed for the pipeline -->
            <!-- Includes OWLools-Core, OBO2OWL, OWLAPI -->
            <dependency>
                <groupId>org.bbop</groupId>
                <artifactId>OWLTools-all</artifactId>
                <version>0.2.1-SNAPSHOT</version>
                <scope>compile</scope>
            </dependency>
            <!-- Used to generate our custom NCBI taxonomy ontology -->
            <dependency>
                <groupId>org.bbop</groupId>
                <artifactId>OWLTools-ncbi</artifactId>
                <version>0.2.1-SNAPSHOT</version>
                <scope>compile</scope>
            </dependency>

            <!-- To parse the OMA HOG data file -->
            <dependency>
                <groupId>sbc</groupId>
                <artifactId>orthoxml</artifactId>
                <version>0.1b</version>
                <scope>compile</scope>
            </dependency>

            <!-- To parse CSV/TSV files -->
            <dependency>
                <groupId>net.sf.supercsv</groupId>
                <artifactId>super-csv</artifactId>
                <version>2.1.0</version>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>net.sf.supercsv</groupId>
                <artifactId>super-csv-dozer</artifactId>
                <version>2.3.1</version>
                <scope>compile</scope>
            </dependency>

            <!-- End for pipeline -->

            <!-- Needed for the webapp -->
            <dependency>
                <groupId>org.apache.tomcat</groupId>
                <artifactId>tomcat-servlet-api</artifactId>
                <version>7.0.35</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>4.3.4</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>net.sf.ehcache</groupId>
                <artifactId>ehcache-ee</artifactId>
                <version>2.7.2</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-slf4j-impl</artifactId>
                <version>2.0.2</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.7</version>
                <scope>compile</scope>
            </dependency>

            <!-- IMPORTANT : Keep this dependency with 'provided' scope even 
                if it is not used, as ehcache-core is replaced by ehcache-ee to use bigmemory. 
                The reason is that it is somehow automatically included with ehcache-web 
                if not explicitly declared here, and conflicts with ehcache-ee when deployed. -->
            <dependency>
                <groupId>net.sf.ehcache</groupId>
                <artifactId>ehcache-core</artifactId>
                <version>2.6.9</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>net.sf.ehcache</groupId>
                <artifactId>ehcache-web</artifactId>
                <version>2.0.4</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>org.terracotta.bigmemory</groupId>
                <artifactId>bigmemory</artifactId>
                <version>4.0.2</version>
                <scope>compile</scope>
            </dependency>

            <!-- End for webapp -->

            <!-- Needed for the core layer -->
            <!-- Used to generate hashes -->
            <dependency>
                <groupId>commons-codec</groupId>
                <artifactId>commons-codec</artifactId>
                <version>1.8</version>
                <scope>compile</scope>
            </dependency>

            <!-- End for the core layer -->

            <!-- Needed for the dao-api layer -->


            <!-- End for the dao-api layer -->

            <!-- Needed for the dao-sql layer -->
            <!-- JDBC logging library -->
            <dependency>
                <groupId>org.bgee.log4jdbc-log4j2</groupId>
                <artifactId>log4jdbc-log4j2-jdbc4.1</artifactId>
                <version>1.17-SNAPSHOT</version>
                <scope>compile</scope>
            </dependency>
            <!-- The JDBC connector -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.27</version>
                <scope>compile</scope>
            </dependency>

            <!-- Used for integration test using a real MySQL database. -->
            <!-- Spring framework is used to execute the .sql files to create 
                the database. -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-test</artifactId>
                <version>3.2.5.RELEASE</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jdbc</artifactId>
                <version>3.2.5.RELEASE</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>3.2.5.RELEASE</version>
                <scope>test</scope>
            </dependency>

            <!-- End for the dao-sql layer -->

        </dependencies>
    </dependencyManagement>

    <build>
        <!-- plugins needed for ALL sub-modules -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.2</version>
                <configuration>
                    <!-- in order to compile with JDK 7, until we move to JDK 8 -->
                    <source>1.7</source>
                    <target>1.7</target>
                    <compilerVersion>1.7</compilerVersion>
                    <fork>true</fork>
                    <!-- 
                    You need to set up the path to a JDK 7 in the Maven settings.xml file, 
                    as explained here: https://maven.apache.org/plugins/maven-compiler-plugin/examples/compile-using-different-jdk.html
                    For instance: 
                       <profile>
                         <id>compiler</id>
                           <properties>
                             <JAVA_1_7_HOME>/Library/Java/JavaVirtualMachines/jdk1.7.0_09.jdk/Contents/Home</JAVA_1_7_HOME>
                             <JAVA_1_7_BOOTCLASSPATH>/Library/Java/JavaVirtualMachines/jdk1.7.0_09.jdk/Contents/Home/lib/*.jar</JAVA_1_7_BOOTCLASSPATH>
                           </properties>
                       </profile> 
                       [...]
                       <activeProfiles>
                         <activeProfile>compiler</activeProfile>
                       </activeProfiles>
                     -->
                    <executable>${JAVA_1_7_HOME}/bin/javac</executable>
                    <bootclasspath>${JAVA_1_7_BOOTCLASSPATH}</bootclasspath>
                </configuration>
            </plugin>

            <!-- Install in our local maven repository libraries that are 
                not on Maven -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.3.2</version>
                <!-- set inherited to do it only once, and not for each sub-module -->
                <inherited>false</inherited>
                <executions>
                    <execution>
                        <id>install-libraries</id>
                        <phase>package</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <executable>${basedir}/m2_local_repository/mvn-install-file.sh</executable>
                    <workingDirectory>${basedir}/m2_local_repository/</workingDirectory>
                </configuration>
            </plugin>

            <!-- unit tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <!-- Default value of enableAssertions is true, but just to make clear... -->
                    <enableAssertions>true</enableAssertions>
                    <!-- Property createe to skip surefire tests without 
                        skipping failsafe tests. Property value is default to skipTests so that we 
                        can still skip unit tests by using skipTests. See the documentation of the 
                        property skip.surefire.tests in this file for more details. -->
                    <skipTests>${skip.surefire.tests}</skipTests>
                </configuration>
            </plugin>

            <!-- Generates sources and javadoc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>install</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.1</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <phase>install</phase>
                        <goals>
                            <goal>jar</goal>
                            <goal>aggregate</goal>
                        </goals>
                        <configuration>
                            <additionalparam>-Xdoclint:none</additionalparam>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>


        <!-- Plugins needed for some sub-modules -->
        <pluginManagement>
            <plugins>
                <!-- *******Used to generate executable JAR files with depedencies******** -->

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>2.3</version>
                </plugin>
                
                
                <!-- *******Used to rename static files with version number in bgee-webapp******** -->
                <plugin>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>1.8</version>
                </plugin>
                

                <!-- ******************** Needed for integration tests in bgee-dao-sql *********************** -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>2.18.1</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>sql-maven-plugin</artifactId>
                    <version>1.5</version>
                </plugin>
                <!-- *******************// END integration tests in bgee-dao-sql ********************* -->


                <!-- to get rid of the warning 'maven-enforcer-plugin (goal 
                    "enforce") is ignored by m2e' in Eclipse. See http://stackoverflow.com/a/13043842/1768736 -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-enforcer-plugin</artifactId>
                                        <versionRange>[1.0.0,)</versionRange>
                                        <goals>
                                            <goal>enforce</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>

                <!-- to generate jar of test classes -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.5</version>
                </plugin>

                <!-- to generate jar of war project -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>2.6</version>
                </plugin>

            </plugins>
        </pluginManagement>
    </build>

</project>
