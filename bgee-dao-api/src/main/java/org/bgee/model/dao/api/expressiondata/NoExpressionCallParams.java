package org.bgee.model.dao.api.expressiondata;

import org.bgee.model.dao.api.expressiondata.CallTO.DataState;

/**
 * This class allows to provide the parameters specific to no-expression calls 
 * (explicit report of absence of expression), when using a {@link DAO}, to filter 
 * the no-expression calls used during queries. 
 * It allows to define conditions on the data types and data qualities of 
 * the no-expression calls to use, and to define whether they should have been 
 * generated by taking into account anatomical entities, and all of their ancestors 
 * by <em>is_a</em> or <em>part_of</em> relations (no-expression calls taking into 
 * account absence of expression in parent structures: when a gene is reported to be 
 * not expressed in a structure, it is expressed <strong>nowhere</strong> in that 
 * structure); or without taking into account ancestor anatomical entities.
 * 
 * @author Frederic Bastian
 * @version Bgee 13
 * @since Bgee 13
 */
public class NoExpressionCallParams extends CallParams {
    /**
     * A {@code NoExpressionCallTO} that will hold some parameters of this 
     * {@code NoExpressionCallParams}. This is because they have some parameters 
     * in common, so the corresponding methods will be delegated to 
     * {@code referenceCallTO}.
     * <p>
     * Only the appropriate methods will be exposed.
     */
    private final NoExpressionCallTO referenceCallTO;
    
    /**
     * Default constructor.
     */
    public NoExpressionCallParams() {
        super();
        this.referenceCallTO = new NoExpressionCallTO();
    }

    
    //***********************************************
    // GETTERS/SETTERS DELEGATED TO referenceCallTO
    //***********************************************
    /**
     * Returns the {@code boolean} defining whether the no-expression calls 
     * used should be based on calls generated using data from anatomical 
     * entities, and all of their ancestors by <em>is_a</em> or <em>part_of</em> 
     * relations (no-expression calls taking into account absence of expression 
     * in parent structures: when a gene is reported to be not expressed in 
     * a structure, it is expressed <strong>nowhere</strong> in that structure); 
     * or without taking into account ancestor anatomical entities. 
     * <p>
     * If {@code true}, all the ancestors will be considered. Default is {@code false}.
     * 
     * @return  A {@code boolean} defining whether absence of expression in ancestors 
     *          of anatomical entities should be considered.
     */
    public boolean isIncludeParentStructures() {
        return referenceCallTO.isIncludeParentStructures();
    }
    /**
     * Sets the {@code boolean} defining whether the no-expression calls 
     * used should be based on calls generated using data from anatomical 
     * entities, and all of their ancestors by <em>is_a</em> or <em>part_of</em> 
     * relations (no-expression calls taking into account absence of expression 
     * in parent structures: when a gene is reported to be not expressed in 
     * a structure, it is expressed <strong>nowhere</strong> in that structure); 
     * or without taking into account ancestor anatomical entities. 
     * <p>
     * If {@code true}, all the ancestors will be considered. Default is {@code false}.
     * 
     * @param include   A {@code boolean} defining whether absence of expression 
     *                  in ancestors of anatomical entities should be considered.
     */
    public void setIncludeParentStructures(boolean include) {
        this.referenceCallTO.setIncludeParentStructures(include);
    }
    
    /**
     * @return  the {@code DataState} defining the requested minimum contribution 
     *          of Affymetrix data to the generation of the calls to be used.
     */
    public DataState getAffymetrixData() {
        return this.referenceCallTO.getAffymetrixData();
    }
    /**
     * @param minContribution   the {@code DataState} defining the requested minimum 
     *                          contribution of Affymetrix data to the generation 
     *                          of the calls to be used.
     */
    public void setAffymetrixData(DataState minContribution) {
        this.referenceCallTO.setAffymetrixData(minContribution);
    }

    /**
     * @return  the {@code DataState} defining the requested minimum contribution 
     *          of <em>in situ</em> data to the generation of the calls 
     *          to be used.
     */
    public DataState getInSituData() {
        return this.referenceCallTO.getInSituData();
    }
    /**
     * @param minContribution   the {@code DataState} defining the requested minimum 
     *                          contribution of <em>in situ</em> data to the generation 
     *                          of the calls to be used.
     */
    public void setInSituData(DataState minContribution) {
        this.referenceCallTO.setInSituData(minContribution);
    }

    /**
     * @return  the {@code DataState} defining the requested minimum contribution 
     *          of relaxed <em>in situ</em> data to the generation of the calls 
     *          to be used.
     */
    public DataState getRelaxedInSituData() {
        return this.referenceCallTO.getRelaxedInSituData();
    }
    /**
     * @param minContribution   the {@code DataState} defining the requested minimum 
     *                          contribution of relaxed <em>in situ</em> data to 
     *                          the generation of the calls to be used.
     */
    public void setRelaxedInSituData(DataState minContribution) {
        this.referenceCallTO.setRelaxedInSituData(minContribution);
    }

    /**
     * @return  the {@code DataState} defining the requested minimum contribution 
     *          of RNA-Seq data to the generation of the calls to be used.
     */
    public DataState getRNASeqData() {
        return this.referenceCallTO.getRNASeqData();
    }
    /**
     * @param minContribution   the {@code DataState} defining the requested minimum 
     *                          contribution of RNA-Seq data to the generation 
     *                          of the calls to be used.
     */
    public void setRNASeqData(DataState minContribution) {
        this.referenceCallTO.setRNASeqData(minContribution);
    }
}
