<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.bgee</groupId>
        <artifactId>bgee-applications</artifactId>
        <version>13</version>
    </parent>

    <artifactId>bgee-webapp</artifactId>
    <packaging>war</packaging>
    <name>bgee-webapp</name>

    <dependencies>

        <!-- Remove these dependencies as long as the webapp does not use 
            the actual Bgee API <dependency> <groupId>${project.groupId}</groupId> <artifactId>bgee-core</artifactId> 
            <version>${project.version}</version> <scope>compile</scope> </dependency> 
            <dependency> <groupId>${project.groupId}</groupId> <artifactId>bgee-dao-api</artifactId> 
            <version>${project.version}</version> <scope>compile</scope> </dependency> -->
        <!-- as long as bgee-dao-sql is the only service provider for bgee-dao-api, 
            we keep this dependency. When other service providers will be available, 
            this dependency might be changed for another service provider -->
        <!-- <dependency> <groupId>${project.groupId}</groupId> <artifactId>bgee-dao-sql</artifactId> 
            <version>${project.version}</version> <scope>compile</scope> </dependency> -->

        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-servlet-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>

        <dependency>
            <groupId>org.terracotta.bigmemory</groupId>
            <artifactId>bigmemory</artifactId>
        </dependency>

        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-ee</artifactId>
        </dependency>

        <!-- IMPORTANT : Keep this dependency (with 'provided' scope in bgee-application 
            pom.xml) even if it is not used, as ehcache-core is replaced by ehcache-ee 
            to use bigmemory. The reason is that it is somehow automatically included 
            with ehcache-web if not explicitly declared here, and conflicts with ehcache-ee 
            when deployed. -->
        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-core</artifactId>
        </dependency>

        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

    </dependencies>

    <properties>
        <!-- properties used to rename css and js files with version number, 
             to avoid caching issues with proxis/web browers. Corresponds by default 
             to the project version number, but we might have additional updates of these files. -->
        <css.version>${project.version}c</css.version>
        <js.version>${project.version}c</js.version>
        <!-- We will rename css and javascript files with version number using 
             maven-antrun-plugin. The files will be copied in a temp directory, 
             and added by maven-war-plugin to the WAR file in the standard directory. -->
        <rename.tmp.directory>${project.build.directory}/rename_tmp</rename.tmp.directory>
    </properties>
    
    <!-- There is a problem when running the webapp from Eclipse: m2e-wtp acquires 
         the web-resources before any lifecycle can be launched, so, before 
         maven-antrun-plugin can rename the files. We define a profile so that 
         maven-antrun-plugin copies files directly into the m2e-wtp web-resources directory, 
         when running from Eclipse. -->
    <profiles>
        <profile>
            <id>m2e</id>
            <!-- This profile is only active when the property "m2e.version"
                 is set, which is the case when building in Eclipse with m2e, 
                 see http://stackoverflow.com/a/21574285/1768736. -->
            <activation>
                <property>
                    <name>m2e.version</name>
                </property>
            </activation>
            <properties>
                <!-- change path where maven-antrun-plugin renames static files -->
                <rename.tmp.directory>${project.build.directory}/m2e-wtp/web-resources/</rename.tmp.directory>
                <!-- In order to have no extension in URLs, change tomcat context root -->
                <m2eclipse.wtp.contextRoot>/</m2eclipse.wtp.contextRoot>
            </properties>
        </profile>
    </profiles>
      
      
    <build>
        <finalName>bgee-webapp-${project.version}</finalName>
        
        <plugins>
        
            <!-- We use the maven-antrun-plugin to rename css and javascript files 
                 with version number, to avoid caching issues with proxis/web browsers. 
                 I couldn't find any other convenient way to rename files. 
                 Other solutions included: renaming the css and javascript directories, 
                 but this would need reconfiguring the server firewall at each release; adding 
                 a sub-directory with version number in css and javascript directories, 
                 but this causes problems of relative paths (e.g., images included in css files 
                 from the img/ directory). -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <id>rename-resources</id>
                        <!-- perform copy before the package phase, 
                             when maven-war-plugin builds the WAR file -->
                        <phase>process-resources</phase>
                        <configuration>
                            <target>
                                <!-- Copy renamed files in a temp directory. 
                                     We will configure the maven-war-plugin to not copy 
                                     files in src/main/webapp/css/ and src/main/webapp/js/ itself, 
                                     and to rather include these renamed files. -->
                                 <!-- Explanation to select files to copy/rename: 
                                      http://stackoverflow.com/a/16092997/1768736 -->
                                 <copy todir="${rename.tmp.directory}/css/">
                                     <fileset dir="${basedir}/src/main/webapp/css/">
                                         <include name="**/*.css" />
                                     </fileset>
                                     <mapper type="glob" from="*.css" to="*-${css.version}.css"/>
                                 </copy>
                                 <copy todir="${rename.tmp.directory}/js/">
                                     <fileset dir="${basedir}/src/main/webapp/js/">
                                         <include name="**/*.js" />
                                     </fileset>
                                     <mapper type="glob" from="*.js" to="*-${js.version}.js"/>
                                 </copy>
                             </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    
                    <!-- We do no let the maven-war-plugin take care of the css and 
                         javascript files, they are renamed with version number 
                         by maven-antrun-plugin, see above. -->
                    <warSourceExcludes>css/,js/</warSourceExcludes>
                    <webResources>
                        <!-- include the resources renamed by maven-antrun-plugin, 
                             at the root of the WAR file -->
                        <resource>
                            <directory>${rename.tmp.directory}</directory>
                            <includes>
                                <include>**/*</include>
                            </includes>
                        </resource>
                        <!-- We filter bgee-webapp.properties so that css version number 
                             and javacript version number are configured. -->
                        <resource>
                            <!-- this is relative to the pom.xml directory -->
                            <directory>src/main/resources/</directory>
                            <includes>
                                <include>bgee-webapp.properties</include>
                            </includes>
                            <!-- Activates filtering -->
                            <filtering>true</filtering>
                            <!-- override the destination directory for this resource, 
                                 relative to the root of the WAR file -->
                            <targetPath>WEB-INF/classes</targetPath>
                        </resource>
                    </webResources>
                    
                    <attachClasses>true</attachClasses>
                </configuration>
            </plugin>
            
            <!-- In order to properly test the class BgeeProperties, we need to ensure 
                 that tests are run one at a time. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <forkCount>1</forkCount>
                    <reuseForks>false</reuseForks>
                </configuration>
            </plugin>
        </plugins>
        
        
        <!-- When running server from Eclipse, we need to tell m2e to execute 
             maven-antrun-plugin, to properly rename css and js files, by default it doesn't. 
             We need to modify the life cycle mapping, see 
             https://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html. -->
        <pluginManagement>
            <plugins>
                <!-- This plugin is not a real one, it is only used by m2e to obtain 
                     config information. This is why it needs to be put in the section 
                     pluginManagement, otherwise Maven would try to download it. -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-antrun-plugin</artifactId>
                                        <versionRange>[1.0.0,)</versionRange>
                                        <goals>
                                            <goal>run</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <execute>
                                            <!-- set to true, otherwise changes are not seen, 
                                            e.g., to a css file, and you would need to perform 
                                            a project update each time. -->
                                            <runOnIncremental>true</runOnIncremental>
                                        </execute >
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        
        
        <!-- In order to correctly filter bgee-webapp.properties even outside of the WAR file -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>bgee-webapp.properties</include>
                </includes>
            </resource>  
        </resources>
        
    </build>
</project>
