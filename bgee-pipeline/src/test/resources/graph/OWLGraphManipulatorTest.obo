format-version: 1.2
ontology: foo
subsetdef: test_subset1 "used to test method delPartOfSubClassOfRelsToSubsetsIfNonOrphan"
subsetdef: test_subset2 "used to test method delPartOfSubClassOfRelsToSubsetsIfNonOrphan"

[Term]
id: FOO:0001
name: root

[Term]
id: FOO:0100
comment: test for the method removeSubgraphs, this root should not be renoved. 
name: root2

[Term]
id: FOO:0002
name: A
relationship: part_of FOO:0001 ! root

[Term]
id: FOO:0003
name: B
comment: the is_a relation to the root should be removed when testing filterSubgraphs(Collection), not the term itself. Also, part_of relation to the root is redundant and should be removed when calling reduceRelations(). It is also use for a propagation test when using removeClassAndPropagateEdges(String) on FOO:0004.
relationship: in_deep_part_of FOO:0004 ! C
relationship: part_of FOO:0001 ! root

[Term]
id: FOO:0004
name: C
comment: overlaps relation to root is redundant and should be removed by reduceRelations(). 
relationship: part_of FOO:0002 ! A
relationship: overlaps FOO:0001 ! root

[Term]
id: FOO:0005
name: D
comment: is_a relation to root should be removed by reducePartOfAndSubClassOfRelations(). 
relationship: part_of FOO:0002 ! A
is_a: FOO:0001 ! root

[Term]
id: FOO:0006
name: subgraph2_root
comment: term root of a subgraph to remove to test OWLGraphManipulator.filterSubgraphs(Collection<String>) and OWLGraphManipulator.removeSubgraphs(Collection<String>). Also, used to test delPartOfSubClassOfRelsToSubsetsIfNonOrphan.
subset: test_subset1 
is_a: FOO:0001 ! root

[Term]
id: FOO:0007
name: subgraph2_A
comment: term part of the subgraph to remove, should be removed. Also, used to test delPartOfSubClassOfRelsToSubsetsIfNonOrphan.
subset: test_subset1 
relationship: has_developmental_contribution_from FOO:0006 ! subgraph2_root

[Term]
id: FOO:0008
name: subgraph2_B
comment: term part of the subgraph to remove, should be removed
relationship: develops_from FOO:0007 ! subgraph2_A

[Term]
id: FOO:0009
name: subgraph2_C
comment: term part of the subgraph to remove, should be removed. Also, used to test delPartOfSubClassOfRelsToSubsetsIfNonOrphan.
subset: test_subset2 
relationship: overlaps FOO:0007 ! subgraph2_A

[Term]
id: FOO:0010
name: subgraph2_D
comment: term part of the subgraph to remove, should be removed. Relations to subgraph2_A should NOT be removed when testing reduceRelations(), as the direct relation is more precise (part_of) than the combined one (overlaps).
relationship: part_of FOO:0009 ! subgraph2_C
relationship: part_of FOO:0007 ! subgraph2_A

[Term]
id: FOO:0011
name: subgraph2_subgraph1
comment: term part of both the subgraph to remove, and the subgraph to keep, should NOT be removed. Also, no relations should be removed by reduceRelations().
relationship: part_of FOO:0009 ! subgraph2_C
is_a: FOO:0002 ! A

[Term]
id: FOO:0012
name: subgraph2_E
comment: term part of the subgraph to remove, should be removed
relationship: transformation_of FOO:0008 ! subgraph2_B

[Term]
id: FOO:0013
name: subgraph3_root
comment: term root of a subgraph not to be removed. Also, relation is_a to the root should be removed by reducePartOfAndSubClassOfRelations()
is_a: FOO:0001 ! root
relationship: part_of FOO:0001 ! root

[Term]
id: FOO:0014
name: subgraph4_root_subgraph2
comment: term part of both the subgraph to remove, and a subgraph to keep, should NOT be removed. It is a sibling of the root of the subgraph to be removed, and also one of its descendant. Also, relation is_a to the root is redundant and should be removed by reduceRelations(). It should also be removed by reducePartOfAndSubClassOfRelations(). 
is_a: FOO:0001 ! root
is_a: FOO:0006 ! subgraph2_root
is_a: FOO:0002 ! A

[Term]
id: FOO:0015
name: E
comment: test of propagation when using removeClassAndPropagateEdges(String) on FOO:0004. Also, the relation part_of FOO:0001 is redundant and should be removed by reduceRelations()
is_a: FOO:0004 ! C
relationship: part_of FOO:0001 ! root

[Term]
id: FOO:0016
name: F
is_obsolete: true

[Typedef]
id: overlaps
name: overlaps
def: "A overlaps B if they share some part in common." []
xref: RO:0002131
transitive_over: part_of ! part of
holds_over_chain: has_part overlaps ! overlaps
holds_over_chain: has_part part_of ! part of
expand_expression_to: "BFO_0000051 some (BFO_0000050 some ?Y)" []

[Typedef]
id: has_part
name: has_part
namespace: anatomical_entity_ontology
is_transitive: true
inverse_of: part_of  ! part of
xref: BFO:0000051
xref: OBO_REL:has_part
is_a: overlaps  ! overlaps

[Typedef]
id: part_of
name: part of
is_transitive: true
xref: BFO:0000050
xref: OBO_REL:part_of
is_a: overlaps ! overlaps

[Typedef]
id: in_deep_part_of
name: in_deep_part_of
namespace: uberon
is_a: part_of ! part of

[Typedef]
id: has_developmental_contribution_from
name: has developmental contribution from
namespace: uberon
is_transitive: true
xref: RO:0002254
holds_over_chain: has_part develops_from  ! develops from

[Typedef]
id: develops_from
name: develops from
namespace: zebrafish_anatomical_ontology
is_transitive: true
xref: RO:0002202
is_a: has_developmental_contribution_from  ! has developmental contribution from
transitive_over: part_of  ! part of
holds_over_chain: part_of develops_from  ! develops from

[Typedef]
id: transformation_of
name: transformation_of
synonym: "transforms from" EXACT [SIO:000657]
xref: http://semanticscience.org/resource/SIO_000657
is_transitive: true
is_a: develops_from ! develops_from

[Typedef]
id: fake_rel1
name: fake_rel1
namespace: fake_rel
is_transitive: true

[Typedef]
id: fake_rel2
name: fake_rel2
namespace: fake_rel
is_a: fake_rel1 ! fake_rel1

[Typedef]
id: fake_rel3
name: fake_rel3
namespace: fake_rel
is_transitive: true
is_a: fake_rel2 ! fake_rel2

[Typedef]
id: fake_rel4
name: fake_rel4
namespace: fake_rel
is_transitive: true
is_a: fake_rel2 ! fake_rel2

[Typedef]
id: fake_rel5
name: fake_rel5
namespace: fake_rel
is_a: develops_from ! develops from

