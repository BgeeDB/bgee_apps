package org.bgee.model.expressiondata.querytools.filters;

import java.util.Collection;
import java.util.Collections;
import java.util.EnumMap;
import java.util.Map;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.bgee.model.expressiondata.DataParameters;
import org.bgee.model.expressiondata.DataParameters.CallType;
import org.bgee.model.expressiondata.DataParameters.DataQuality;
import org.bgee.model.expressiondata.DataParameters.DataType;

/**
 * A <code>CallFilter</code> specifying conditions to retrieve expression data, 
 * based on the overall expression data calls generated in Bgee. 
 * 
 * @author Frederic Bastian
 * @Version Bgee 13
 * @since Bgee 01
 */
public abstract class BasicCallFilter implements CallFilter {
	/**
	 * <code>Logger</code> of the class. 
	 */
	private final static Logger log = LogManager.getLogger(BasicCallFilter.class.getName());


	/**
	 * A <code>CallType</code> defining the type of call to use. 
	 */
	private final CallType callType;
	/**
	 * An <code>EnumMap</code> with <code>DataType</code>s as key 
	 * defining the data types to use, the associated value being 
	 * a <code>DataQuality</code> defining the <strong>minimum</strong> quality level 
	 * to use for this data type. If this <code>EnumMap</code> is empty, 
	 * any data type can be used, with any data quality (minimum quality threshold set to 
	 * <code>DataQuality.LOW</code>).
	 */
	private final EnumMap<DataType, DataQuality> dataTypes;
	/**
	 * A <code>boolean</code> defining whether, when <code>dataTypes</code> contains 
	 * several <code>DataType</code>s (or none, meaning all data types should be used), 
	 * the data should be retrieved using any of them, 
	 * or based on the agreement of all of them. The recommended value is <code>false</code>.
	 * <p>
	 * For instance, if <code>callType</code> is equal to <code>Expression</code>, 
	 * and <code>dataTypes</code> contains <code>AFFYMETRIX</code> and <code>RNA-Seq</code>: 
	 * if <code>allDataTypes</code> is <code>false</code>, then expression data 
	 * will be retrieved from expression calls generated by Affymetrix or Rna-Seq data 
	 * indifferently; if <code>true</code>, data will be retrieved from expression calls 
	 * generated by <strong>both</code> Affymetrix and RNA-Seq data.
	 */
	private boolean allDataTypes;
	
	/**
	 * Default constructor not public. At least a <code>CallType</code> 
	 * should be provided, see {@link #BasicCallFilter(CallType)}.
	 */
	//Default constructor not public on purpose, suppress warning
	@SuppressWarnings("unused")
	private BasicCallFilter() {
		this(CallType.EXPRESSION);
	}

	/**
	 * Instantiate a <code>BasicCallFilter</code> for a type of calls 
	 * corresponding to <code>callType</code>, based on any data type and any quality.
	 * 
	 * @param callType	The <code>CallType</code> which expression data retrieval 
	 * 					will be based on.
	 */
	public BasicCallFilter(CallType callType) {
		log.entry(callType);
		
		this.callType = callType;
		this.dataTypes = new EnumMap<DataType, DataQuality>(DataType.class);
		this.setAllDataTypes(false);

		log.exit();
	}
	
	/**
	 * Get the <code>CallType</code> defining the type of call to use 
	 * when retrieving expression data.
	 * 
	 * @return the <code>CallType</code> defining the type of call to use.
	 */
	public CallType getCallType() {
		return this.callType;
	}
	
	/**
	 * Return the data types and qualities requested for this filter, as 
	 * an unmodifiable <code>Map</code> with <code>DataType</code>s as key defining 
	 * the data types to use, the associated value being a <code>DataQuality</code> 
	 * defining the <strong>minimum</strong> quality level to use for this data type. 
	 * If this <code>Map</code> is empty, any data type can be used, 
	 * with any data quality (minimum quality threshold set to 
	 * <code>DataQuality.LOW</code>).
	 * <p>
	 * Whether data retrieved should be based on the agreement of all 
	 * <code>DataType</code>s (taking into account their associated 
	 * <code>DataQuality</code>), or only at least one of them, is based on 
	 * the value returned by {@link #isAllDataTypes()}.
	 * 
	 * @return 	The <code>Map</code> of allowed <code>DataType</code>s 
	 * 			associated to a <code>DataQuality</code>.
	 * @see #getDataTypes()
	 */
	public Map<DataType, DataQuality> getDataTypesQualities() {
		return Collections.unmodifiableMap(this.dataTypes);
	}
	/**
	 * Return an unmodifiable <code>set</code> of <code>DataType</code>s, being 
	 * the data types to use. The <code>DataType</code>s are returned 
	 * without their associated <code>DataQuality</code>, 
	 * see {@link #getDataTypesWithQualities()} to get them. 
	 * <p>
	 * Whether data retrieved should be based on the agreement of all 
	 * <code>DataType</code>s (taking into account their associated 
	 * <code>DataQuality</code>), or only at least one of them, is based on 
	 * the value returned by {@link #isAllDataTypes()}.
	 * 
	 * @return 	A <code>Set</code> of the allowed <code>DataType</code>s.
	 * @see #getDataTypesWithQualities()
	 * @see #clearDataTypesQualities()
	 */
	public Set<DataType> getDataTypes() {
		return Collections.unmodifiableSet(this.getDataTypesQualities().keySet());
	}
	/**
	 * Add <code>dataType</code> to the list of data types to use, 
	 * and use <code>dataQuality</code> to define the minimum data quality to use 
	 * for this data type. 
	 * <p>
	 * If this <code>DataType</code> was already set, replace the previous 
	 * <code>DataQuality</code> value set.
	 * @param dataType 		A <code>DataType</code> to be added to the allowed data types.
	 * @param dataQuality	A <code>DataQuality</code> being the minimum quality threshold 
	 * 						to use for this data type.
	 * @throws IllegalArgumentException If the type of call requested 
	 * 									(see {@link #getCallType()}), 
	 * 									and the <code>DataType</code> added is not compatible 
	 * 									(for instance, no-expression calls based on EST data 
	 * 									are not available)
	 * @see #addDataType(DataType)
	 * @see #addDataTypes(Collection)
	 * @see #addDataTypes(Collection, DataQuality)
	 */
	public void addDataType(DataType dataType, DataQuality dataQuality) 
	    throws IllegalArgumentException
	{
		log.entry(dataType, dataQuality);
		DataParameters.checkCallTypeDataType(this.getCallType(), dataType);
		this.dataTypes.put(dataType, dataQuality);
		log.exit();
	}
	/**
	 * Add <code>dataType</code> to the list of data types to use, 
	 * with any quality threshold allowed for this data type. 
	 * <p>
	 * If this <code>DataType</code> was already set, replace the previous 
	 * <code>DataQuality</code> minimum quality threshold  for this data type 
	 * by <code>DataQuality.LOW</code>.
	 * @param dataType 		A <code>DataType</code> to be added to the allowed data types.
	 * @throws IllegalArgumentException If the type of call requested 
	 * 									(see {@link #getCallType()}), 
	 * 									and the <code>DataType</code> added is not compatible 
	 * 									(for instance, no-expression calls based on EST data 
	 * 									are not available)
	 * @see #addDataType(DataType, DataQuality)
	 * @see #addDataTypes(Collection)
	 * @see #addDataTypes(Collection, DataQuality)
	 */
	public void addDataType(DataType dataType) 
		    throws IllegalArgumentException
	{
		log.entry(dataType);
		this.addDataType(dataType, DataQuality.LOW);
		log.exit();
	}
	/**
	 * Add <code>dataType</code>s to the list of data types to use, 
	 * with any quality threshold allowed for this data type. 
	 * <p>
	 * If one of these <code>DataType</code>s was already set, replace the previous 
	 * <code>DataQuality</code> minimum quality threshold  for this data type 
	 * by <code>DataQuality.LOW</code>.
	 * 
	 * @param dataTypes 	A <code>Collection</code> of <code>DataType</code>s 
	 * 						to be added to the allowed data types.
	 * @throws IllegalArgumentException If the type of call requested 
	 * 									(see {@link #getCallType()}), 
	 * 									and the <code>DataType</code> added is not compatible 
	 * 									(for instance, no-expression calls based on EST data 
	 * 									are not available)
	 * @see #addDataType(DataType)
	 * @see #addDataType(DataType, DataQuality)
	 * @see #addDataTypes(Collection, DataQuality)
	 */
	public void addDataTypes(Collection<DataType> dataTypes) 
		    throws IllegalArgumentException
	{
		log.entry(dataTypes);
		this.addDataTypes(dataTypes, DataQuality.LOW);
		log.exit();
	}
	/**
	 * Add <code>dataType</code>s to the list of data types to use, 
	 * and use <code>dataQuality</code> to define the minimum data quality to use 
	 * for all of them. 
	 * <p>
	 * If one of these <code>DataType</code>s was already set, replace the previous 
	 * <code>DataQuality</code> value set.
	 * 
	 * @param dataTypes 	A <code>Collection</code> of <code>DataType</code>s 
	 * 						to be added to the allowed data types.
	 * @param dataQuality	A <code>DataQuality</code> being the minimum quality threshold 
	 * 						to use for all these data types.
	 * @throws IllegalArgumentException If the type of call requested 
	 * 									(see {@link #getCallType()}), 
	 * 									and some <code>DataType</code>s added are not compatible 
	 * 									(for instance, no-expression calls based on EST data 
	 * 									are not available)
	 * @see #addDataType(DataType)
	 * @see #addDataType(DataType, DataQuality)
	 * @see #addDataTypes(Collection)
	 */
	public void addDataTypes(Collection<DataType> dataTypes, DataQuality dataQuality) 
		    throws IllegalArgumentException
	{
		log.entry(dataTypes, dataQuality);
		for (DataType dataType: dataTypes) {
			this.addDataType(dataType, dataQuality);
		}
		log.exit();
	}
	public void clearDataTypesQualities() {
		this.dataTypes.clear();
	}
	/**
	 * Return the <code>boolean</code> defining whether, when {@link #getDataTypes()}
	 * returns several <code>DataType</code>s (or none, meaning all data types should 
	 * be used), data should be retrieved using any of them, 
	 * or based on the agreement of all of them. 
	 * <p>
	 * For instance, if {@link #getCallType()} returns <code>Expression</code>, 
	 * and {@link #getDataTypes()} returns <code>AFFYMETRIX</code> and <code>RNA-Seq</code>: 
	 * if this method returns <code>false</code>, then expression data 
	 * will be retrieved from expression calls generated by Affymetrix or Rna-Seq data 
	 * indifferently; if returns <code>true</code>, data will be retrieved from 
	 * expression calls generated by <strong>both</code> Affymetrix and RNA-Seq data.
	 * <p>
	 * The retrieval of data from each <code>DataType</code> takes of course always
	 * into account the <code>DataQuality</code> associated to it (see 
	 * {@link #getDataTypesWithQualities()}).
	 *
	 * @return 	the <code>boolean</code> defining whether data should be retrieved 
	 * 			based on agreement of all <code>DataType</code>s, or only at least 
	 * 			one of them.
	 * @see #setAllDataTypes(boolean)
	 * @see #getCallTypes()
	 */
	public boolean isAllDataTypes() {
		return this.allDataTypes;
	}
	/**
	 * Set the <code>boolean</code> defining whether, when {@link #getDataTypes()}
	 * returns several <code>DataType</code>s (or none, meaning all data types should 
	 * be used), data should be retrieved using any of them, 
	 * or based on the agreement of all of them. The recommended value is <code>false</code>.
	 * <p>
	 * For instance, if {@link #getCallType()} returns <code>Expression</code>, 
	 * and {@link #getDataTypes()} returns <code>AFFYMETRIX</code> and <code>RNA-Seq</code>: 
	 * if this method returns <code>false</code>, then expression data 
	 * will be retrieved from expression calls generated by Affymetrix or Rna-Seq data 
	 * indifferently; if returns <code>true</code>, data will be retrieved from 
	 * expression calls generated by <strong>both</code> Affymetrix and RNA-Seq data.
	 * <p>
	 * The retrieval of data from each <code>DataType</code> takes of course always
	 * into account the <code>DataQuality</code> associated to it (see 
	 * {@link #getDataTypesWithQualities()}).
	 *
	 * @param allDataTypes 	the <code>boolean</code> defining whether data should 
	 * 						be retrieved based on agreement of all <code>DataType</code>s, 
	 * 						or only at least one of them. 
	 * @see #isAllDataTypes()
	 * @see #getCallTypes()
	 */
	public void setAllDataTypes(boolean allDataTypes) {
		log.entry(allDataTypes);
		this.allDataTypes = allDataTypes;
		log.exit();
	}

}
