package org.bgee.pipeline.js;

import java.io.FileWriter;
import java.io.IOException;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.bgee.controller.URLParameters;
import org.bgee.controller.URLParameters.Parameter;

/**
 * Class that generates a javascript equivalent of the provided {@link URLParameters} class.
 * The aim should be to use an instance similar to the one injected to the {@link FrontController}
 * of bgee-webapp. It writes the result in the file provided to the constructor.
 *
 * @author Mathieu Seppey
 *
 * @version Bgee 13, Aug 2014
 * @since Bgee 13
 */
public class URLParametersJsConverter extends JSConverter {

    private final static Logger log = LogManager.getLogger(URLParametersJsConverter.class.getName());

    /**
     * An instance of {@code URLParameters} that will be used as source to generate the parameters
     * in the javascript file. 
     */
    private final URLParameters urlParameters;

    /**
     * Constructor
     * @param writer            A {@FileWriter} to produce the output file
     * @param urlParameters     An instance of {@code URLParameters} that will be used as 
     *                          source to generate the parameters in the javascript file. 
     */
    public  URLParametersJsConverter(FileWriter writer, URLParameters urlParameters){
        super(writer);
        this.urlParameters = urlParameters;
    }

    @Override
    public void writeJSCode() throws IOException {
        log.entry();
        this.writeln("/**");
        this.writeln(" * Provides Parameter object instances, each represents a parameter that ");
        this.writeln(" * can be included in URLs that are sent to, or generated by the webapp.");
        this.writeln(" * These Parameter instances contain information about the parameter usage,");
        this.writeln(" * such as its name, format, number of values allowed, etc.");
        this.writeln(" * ");
        this.writeln(" * It is also used by a request parameter (see requestparameters.js) as ");
        this.writeln(" * key to store the actual value(s) bound to this parameter in a table");
        this.writeln(" * Indeed, these Parameter objects do not store directly the value(s) its");
        this.writeln(" * corresponding parameter can take");
        this.writeln(" * ");
        this.writeln(" * It is an object literal that cannot be instantiated. It has to be");
        this.writeln(" * initialized once by calling the method init() before being used.");
        this.writeln(" *");
        this.writeln(" * @author  Mathieu Seppey");
        this.writeln(" * @version Bgee 13 Aug 2014");
        this.writeln(" * @since   Bgee 13");
        this.writeln(" **/");
        this.writeln("var urlParameters = {");
        this.writeln("");
        this.writeln("        /**");
        this.writeln("         * Constructor");
        this.writeln("         *                                                                                    ");
        this.writeln("         * @param name                    A {@code String} that is the name of the parameter"); 
        this.writeln("         *                                as seen in an URL");
        this.writeln("         * @param allowsMultipleValues    A {@code Boolean} that indicates whether ");
        this.writeln("         *                                the parameter accepts multiple values.");
        this.writeln("         * @param isStorable              A {@code boolean} defining whether the parameter ");
        this.writeln("         *                                is storable.");
        this.writeln("         * @param isSecure                A {@code boolean} defining whether the parameter ");
        this.writeln("         *                                is secure.");
        this.writeln("         * @param maxSize                 An {@code int} that represents the maximum number ");
        this.writeln("         *                                of characters allowed for this parameter");
        this.writeln("         * @param format                  A {@code String} that contains the regular expression ");
        this.writeln("         *                                that this parameter has to fit to.");
        this.writeln("         * @param type                    The data type of the value ");
        this.writeln("         *                                ");
        this.writeln("         **/");
        this.writeln("        Parameter: function(name,allowsMultipleValues,isStorable,isSecure,"
                + "maxSize,format,type) {");
        this.writeln("            this.name = name ;");
        this.writeln("            this.allowsMultipleValues = allowsMultipleValues;");
        this.writeln("            this.isStorable = isStorable ;");
        this.writeln("            this.isSecure = isSecure ;");
        this.writeln("            this.maxSize = maxSize ;");
        this.writeln("            this.format = format ;");
        this.writeln("            this.type = type ;");
        this.writeln("        },");
        this.writeln("");
        this.writeln("        /**");
        this.writeln("         * Initialization of all Parameters allowed in Bgee");
        this.writeln("         **/");           
        this.writeln("        init: function(){");
        this.writeln("            this.list = [];");
        // Dynamic generation of every parameters' instantiation.
        // Browse the list
        for(Parameter<?> p : this.urlParameters.getList()){
            // Convert the java type into the javascript type
            String type ="";
            if(p.getType().equals(Boolean.class)){
                type = "boolean";
            }
            else if(p.getType().equals(Integer.class)){
                type = "number";
            }
            else{
                type = "string"; // anything else will be string.
            }
            // Convert the format java regex into the javascript format. If null, keep null
            String format = p.getFormat();
            if(format != null){
                format = "/"+format+"/"; // maybe it will have to be improved when new param
            }                            // will be added with complex java regex
            // Write the instantiation of the param in js
            this.writeln("            this."+StringUtils.upperCase(p.getName())+" = "
                    + "new urlParameters.Parameter('"+p.getName()+"',"+p.allowsMultipleValues()+","
                    +p.isStorable()+","+p.isSecure()+","+p.getMaxSize()+","+format+",'"
                    +type+"');");
            // Add the parameter just instantiated into the param list, like the java does
            this.writeln("            this.list.push(this."+StringUtils.upperCase(p.getName())+");");
        }
        this.writeln("        },");
        this.writeln("");
        // Now generate a getter for every parameter, dynamically generate the name of the method
        for(Parameter<?> p : this.urlParameters.getList()){
            this.writeln("        /**");
            this.writeln("         * @return    The parameter "+p.getName());
            this.writeln("         */");
            this.writeln("        getParam"+this.toCamelCase(p.getName())+": function(){");
            this.writeln("            return this."+StringUtils.upperCase(p.getName())+";");
            this.writeln("        },");
        }
        // And add a method to return the list of all parameters
        this.writeln("        /**");
        this.writeln("         * @return An {@code Array} that lists all declared"
                + " {@code Parameter}");
        this.writeln("         */");
        this.writeln("        getList: function() {");
        this.writeln("            return this.list;");
        this.writeln("        }");
        this.writeln("");
        this.writeln("};");
        log.exit();
    }

    /**
     * This converts a {@code String} like the_name_of_param into theNameOfParam
     * @param name  A {@code String} containing "_" to convert into camel case
     * @return  The converted name
     */
    private String toCamelCase(String name){
        String camelCaseName = "";
        for(String word : name.split("_")){
            camelCaseName += StringUtils.upperCase(word.substring(0,1))+word.substring(1);
        }
        return camelCaseName;
    }

}
