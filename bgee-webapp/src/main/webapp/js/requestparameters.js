/**
 * requestParameters handles the parameters that are received and sent through a request.
 * It checks the validity of the parameters (see urlparameters.js), adds/resets/returns
 * parameters and generates URLs. It is the connector between the view and the controller layers.
 * <p>
 * Use new requestParameters(queryString, encodeUrl, parametersSeparator) to create 
 * a new instance for every request you have to manage. All arguments are optional: 
 * <ul>
 * <li>if {@code queryString} is null or empty, then no parameters of the object will be set 
 * (= "blank" requestParameters object, that you can use to generate URLs after setting 
 * parameters); if it is defined, then all parameter values will be extracted from the URL, 
 * and will be accessible through the getters of this class (this is usually used 
 * to retrieve parameters from the browser URL at page loading). 
 * <strong>Note that the values can be retrieved indifferently from the search part 
 * (window.location.search) and the hash part of the URL (window.location.hash)</strong>.
 * <li>if {@code encodeUrl} is undefined, the default value {@code true} is used; 
 * <li>if {@code parametersSeparator} is null or empty, the default value '&' is used.
 * </ul>
 * <p>
 * Examples :
 * 
 * <pre>
 * {@code 
 * 
 * # for current URL
 * var currentRequest = new requestParameters(window.location.search + window.location.hash); 
 * # get value of the "page" parameter
 * currentRequest.getPage();
 * # getPage() is just a helper method, this is equivalent to: 
 * currentRequest.getFirstValue(urlParameters.getParamPage());
 *     
 * # To generate URLs, use a "blank" request parameters. Here, with parameters URL encoded, 
 * # and '&amp;' as parameter separator. 
 * var urlGenerator = new requestParameters(null, true, '&amp;'); 
 * # PAGE_DOWNLOAD() emulates a static final variable (here, to link to a download page)
 * urlGenerator.setPage(currentRequest.PAGE_DOWNLOAD());
 * # generate the URL from the parameters set
 * urlGenerator.getRequestURL();
 * 
 * # generate only hash part of URL (useful to update {@code window.location.hash})
 * var hashGenerator = new requestParameter();
 * hashGenerator.setDataKey('hash_key_whatever'); //again, just a helper method
 * window.location.hash = hashGenerator.getRequestHash();
 * 
 * }
 * </pre>
 * 
 * @author Mathieu Seppey
 * @author Frederic Bastian
 * @author Valentine Rech de Laval
 * @version Bgee 13, Feb. 2016
 * @since Bgee 13
 */

function requestParameters(queryString, encodeUrl, parametersSeparator){

    //*********************************************
    // PRIVATE VARS
    //*********************************************
	/**
	 * A {@code String} to be appended to the hash separator '#' in order to generate 
	 * the custom separator {@link jsHashSeparator}. For instance, to use 
	 * a custom hash separator '#!', set this value to '!'. See method 
	 * {@link #getRequestHash()} to see why we need to store those separately. 
	 */
	var addToHashSeparator = '';
	/**
     * A {@code String} that is the separator to use between the search part and hash part 
     * of URLs generated by the method {@link #getRequestURL(String, Collection, boolean)}. 
     * This is used only for pages where the hash is used to read/write parameters 
     * from URL in javascript.
     * <p>
     * This attribute is useful if you wanted, for instance, to have such pages 
     * indexed by google (it should then be changed to '#!').
     * <p>
     * Note that this attribute is not use as hash separator when the hash is actually used 
     * to link to an element with corresponding ID on the page (see {@link setURLHash(String)}).
     */
	var jsHashSeparator = "#" + addToHashSeparator;

    /**
     * A {@code String} that is the 'hash' part of the URL to add 
     * when methods {@code getRequestURL} are called. This is used to actually link 
     * to an element with this ID (the 'classical' use of hash), this must not be used 
     * to store parameter values (the javascript use, allowing js to change an URL 
     * with no redirection). For this latter use, see the {@code #getRequestURL} methods.
     */
    var urlHash;
	
    /**
     * Associative array that contains the values for all parameters present in the query
     */
    var paramValues = null ;
    /**
     * A {@code boolean} to tell whether to encode the url or not
     */
    var reqEncodeUrl = null ;
    /**
     * A {@code String} used as parameters separator
     */
    var reqParametersSeparator = null ;

    
    //*********************************************
    // EMULATES PUBLIC STATIC FINAL ATTRIBUTES
    //*********************************************
    /**
     * A {@code String} that is the value taken by the {@code page} parameter 
     * (see {@link urlParameters#getParamPage()}) when a download page is requested.
     * This parameter will then be provided outside of this class through the method 
     * {@link #PAGE_DOWNLOAD()} (to get the behavior of a public final parameter).
     */
    var pageDownload = 'download';
    /**
     * A method to obtain the value taken by the {@code page} parameter 
     * (see {@link urlParameters#getParamPage()}) when a download page is requested.
     */
    this.PAGE_DOWNLOAD = function() {
    	return pageDownload;
    }
    /**
     * A {@code String} that is the value taken by the {@code page} parameter 
     * (see {@link urlParameters#getParamPage()}) when a topAnat page is requested.
     * This parameter will then be provided outside of this class through the method 
     * {@link #PAGE_TOP_ANAT()} (to get the behavior of a public final parameter).
     */
    var pageTopAnat = 'top_anat';
    /**
     * A method to obtain the value taken by the {@code page} parameter 
     * (see {@link urlParameters#getParamPage()}) when a topAnat page is requested.
     */
    this.PAGE_TOP_ANAT = function() {
    	return pageTopAnat;
    }
    /**
     * A {@code String} that is the value taken by the {@code page} parameter 
     * (see {@link #getParamPage()}) when a documentation page is requested.
     * This parameter will then be provided outside of this class through the method 
     * {@link #PAGE_DOCUMENTATION()} (to get the behavior of a public final parameter).
     */
    var pageDocumentation = 'doc';
    /**
     * A method to obtain the value taken by the {@code page} parameter 
     * (see {@link #getParamPage()}) when a documentation page is requested.
     */
    this.PAGE_DOCUMENTATION = function() {
    	return pageDocumentation;
    }
    /**
     * A {@code String} that is the value taken by the {@code page} parameter  
     * (see {@link #getParamPage()}) when an about page is requested.
     * This parameter will then be provided outside of this class through the method 
     * {@link #PAGE_ABOUT()} (to get the behavior of a public final parameter).
     */
    var pageAbout = 'about';
    /**
     * A method to obtain the value taken by the {@code page} parameter  
     * (see {@link #getParamPage()}) when an about page is requested.
     */
    this.PAGE_ABOUT = function() {
    	return pageAbout;
    }
    /**
     * A {@code String} that is the value taken by the {@code page} parameter  
     * (see {@link #getParamPage()}) when a gene page is requested.
     * This parameter will then be provided outside of this class through the method 
     * {@link #PAGE_GENE()} (to get the behavior of a public final parameter).
     */
    var pageGene = 'gene';
    /**
     * A method to obtain the value taken by the {@code page} parameter  
     * (see {@link #getParamPage()}) when a gene page is requested.
     */
    this.PAGE_GENE = function() {
    	return pageGene;
    }
    /**
     * A {@code String} that is the value taken by the {@code page} parameter  
     * (see {@link #getParamPage()}) when a search page is requested.
     * This parameter will then be provided outside of this class through the method 
     * {@link #PAGE_SEARCH()} (to get the behavior of a public final parameter).
     */
    var pageSearch = 'search';

    /**
     * A method to obtain the value taken by the {@code page} parameter  
     * (see {@link #getParamPage()}) when a search page is requested.
     */
    this.PAGE_SEARCH = function() {
    	return pageSearch;
    }


    /**
     * A {@code String} that is the value taken by the {@code action} parameter 
     * (see {@link #getParamAction()}) when download page about files providing calls of 
     * expression is requested.
     * This parameter will then be provided outside of this class through the method 
     * {@link #ACTION_DOWLOAD_CALL_FILES()} (to get the behavior 
     * of a public final parameter).
     */
    var actionDownloadCallFiles = 'expr_calls';
    /**
     * A method to obtain the value taken by the {@code action} parameter 
     * (see {@link #getParamAction()}) when download page about files providing calls of 
     * expression is requested.
     */
    this.ACTION_DOWLOAD_CALL_FILES = function() {
    	return actionDownloadCallFiles;
    }
    /**
     * A {@code String} that is the value taken by the {@code action} parameter 
     * (see {@link #getParamAction()}) when download page about files providing processed 
     * expression values is requested.
     * This parameter will then be provided outside of this class through the method 
     * {@link #ACTION_DOWLOAD_PROC_VALUE_FILES()} (to get the behavior 
     * of a public final parameter).
     */
    var actionDownloadProcValueFiles = 'proc_values';
    /**
     * A method to obtain the value taken by the {@code action} parameter 
     * (see {@link #getParamAction()}) when download page about files providing processed 
     * expression values is requested.
     */
    this.ACTION_DOWLOAD_PROC_VALUE_FILES = function() {
    	return actionDownloadProcValueFiles;
    }
    /**
     * A {@code String} that is the value taken by the {@code action} parameter 
     * (see {@link #getParamAction()}) when documentation about download files providing calls of
     * expression is requested.
     * This parameter will then be provided outside of this class through the method 
     * {@link #ACTION_DOC_CALL_DOWLOAD_FILES()} (to get the behavior 
     * of a public final parameter).
     */
    var actionDocCallDownloadFiles = 'call_files';
    /**
     * A method to obtain the value taken by the {@code action} parameter 
     * (see {@link #getParamAction()}) when documentation about download files providing calls of
     * expression is requested.
     */
    this.ACTION_DOC_CALL_DOWLOAD_FILES = function() {
    	return actionDocCallDownloadFiles;
    }
    /**
     * A {@code String} that is the value taken by the {@code action} parameter 
     * (see {@link #getParamAction()}) when documentation about download files providing processed 
     * expression values is requested.
     * This parameter will then be provided outside of this class through the method 
     * {@link #ACTION_DOC_PROC_EXPR_VALUE_DOWLOAD_FILES()} (to get the behavior 
     * of a public final parameter).
     */
    var actionDocProcExprValueDownloadFiles = 'proc_value_files';
    /**
     * A method to obtain the value taken by the {@code action} parameter 
     * (see {@link #getParamAction()}) when documentation about download files providing processed 
     * expression values is requested.
     */
    this.ACTION_DOC_PROC_EXPR_VALUE_DOWLOAD_FILES = function() {
    	return actionDocProcExprValueDownloadFiles;
    }
    /**
     * A {@code String} that is the value taken by the {@code action} parameter
     * (see {@link #getParamAction()}) when documentation about how to access to 
     * Bgee data is requested.
     * This parameter will then be provided outside of this class through the method 
     * {@link #ACTION_DOC_HOW_TO_ACCESS()} (to get the behavior 
     * of a public final parameter).
     */
    var actionDocHowToAccess = 'access';
    /**
     * A method to obtain the value taken by the {@code action} parameter
     * (see {@link #getParamAction()}) when documentation about how to access to 
     * Bgee data is requested.
     */
    this.ACTION_DOC_HOW_TO_ACCESS = function() {
    	return actionDocHowToAccess;
    }
    /**
     * A {@code String} that is the value taken by the {@code action} parameter
     * (see {@link #getParamAction()}) when gene page about auto-completion is requested.
     * This parameter will then be provided outside of this class through the method 
     * {@link #ACTION_AUTO_COMPLETE_GENE_SEARCH()} (to get the behavior of a public final parameter).
     */
    var actionAutoCompleteGeneSearch = 'auto_complete_gene_search';
    /**
     * A method to obtain the value taken by the {@code action} parameter
     * (see {@link #getParamAction()}) when gene page about auto-completion is requested.
     */
    this.ACTION_AUTO_COMPLETE_GENE_SEARCH = function() {
    	return actionAutoCompleteGeneSearch;
    }


    /**
     * A {@code String} that is the anchor to use in the hash part of an URL 
     * to link to the multi-species part, in the documentation about gene expression calls.
     * This parameter will then be provided outside of this class through the method 
     * {@link #HASH_DOC_CALL_MULTI()} (to get the behavior 
     * of a public final parameter).
     */
    var hashDocCallMulti = 'multi';
    /**
     * A method to obtain the value of the anchor to use in the hash part of an URL 
     * to link to the multi-species part, in the documentation about gene expression calls.
     */
    this.HASH_DOC_CALL_MULTI = function() {
    	return hashDocCallMulti;
    }
    /**
     * A {@code String} that is the anchor to use in the hash part of an URL 
     * to link to the OMA orthologs file part, in the documentation about gene expression calls.
     * This parameter will then be provided outside of this class through the method 
     * {@link #HASH_DOC_CALL_OMA()} (to get the behavior 
     * of a public final parameter).
     */
    var hashDocCallOMA = 'oma_hog';
    /**
     * A method to obtain the value of the anchor to use in the hash part of an URL 
     * to link to the OMA orthologs file part, in the documentation about gene expression calls.
     */
    this.HASH_DOC_CALL_OMA = function() {
    	return hashDocCallOMA;
    }
    /**
     * A {@code String} that is the anchor to use in the hash part of an URL 
     * to link to the single species expression part, in the documentation 
     * about gene expression calls.
     * This parameter will then be provided outside of this class through the method 
     * {@link #HASH_DOC_CALL_SINGLE_EXPR()} (to get the behavior 
     * of a public final parameter).
     */
    var hashDocCallSingleExpr = 'single_expr';
    /**
     * A method to obtain the value of the anchor to use in the hash part of an URL 
     * to link to the single species expression part, in the documentation about 
     * gene expression calls.
     */
    this.HASH_DOC_CALL_SINGLE_EXPR = function() {
    	return hashDocCallSingleExpr;
    }
    /**
     * A {@code String} that is the anchor to use in the hash part of an URL 
     * to link to the single species diff. expression part, in the documentation 
     * about gene expression calls.
     * This parameter will then be provided outside of this class through the method 
     * {@link #HASH_DOC_CALL_SINGLE_DIFF()} (to get the behavior 
     * of a public final parameter).
     */
    var hashDocCallSingleDiff = 'single_diff';
    /**
     * A method to obtain the value of the anchor to use in the hash part of an URL 
     * to link to the single species diff. expression part, in the documentation about 
     * gene expression calls.
     */
    this.HASH_DOC_CALL_SINGLE_DIFF = function() {
    	return hashDocCallSingleDiff;
    }
    
    /**
     * A {@code String} that is the value taken by the {@code displayType} parameter 
     * (see {@link URLParameters#getParamDisplayType()}) to obtain a XML view.
     * This parameter will then be provided outside of this class through the method 
     * {@link #DISPLAY_TYPE_XML()} (to get the behavior 
     * of a public final parameter).
     */
    var displayTypeXml = "xml";
    /**
     * A method to obtain the value taken by the {@code displayType} parameter 
     * (see {@link URLParameters#getParamDisplayType()}) to obtain a XML view.
     */
    this.DISPLAY_TYPE_XML = function() {
    	return displayTypeXml;
    }
    /**
     * A {@code String} that is the value taken by the {@code displayType} parameter 
     * (see {@link URLParameters#getParamDisplayType()}) to obtain a CSV view.
     * This parameter will then be provided outside of this class through the method 
     * {@link #DISPLAY_TYPE_CSV()} (to get the behavior 
     * of a public final parameter).
     */
    var displayTypeCsv = "csv";
    /**
     * A method to obtain the value taken by the {@code displayType} parameter 
     * (see {@link URLParameters#getParamDisplayType()}) to obtain a CSV view.
     */
    this.DISPLAY_TYPE_CSV = function() {
    	return displayTypeCsv;
    }
    /**
     * A {@code String} that is the value taken by the {@code displayType} parameter 
     * (see {@link URLParameters#getParamDisplayType()}) to obtain a TSV view.
     * This parameter will then be provided outside of this class through the method 
     * {@link #DISPLAY_TYPE_TSV()} (to get the behavior 
     * of a public final parameter).
     */
    var displayTypeTsv = "tsv";
    /**
     * A method to obtain the value taken by the {@code displayType} parameter 
     * (see {@link URLParameters#getParamDisplayType()}) to obtain a TSV view.
     */
    this.DISPLAY_TYPE_TSV = function() {
    	return displayTypeTsv;
    }
    /**
     * A {@code String} that is the value taken by the {@code displayType} parameter 
     * (see {@link URLParameters#getParamDisplayType()}) to obtain a JSON view.
     * This parameter will then be provided outside of this class through the method 
     * {@link #DISPLAY_TYPE_JSON()} (to get the behavior 
     * of a public final parameter).
     */
    var displayTypeJson = "json";
    /**
     * A method to obtain the value taken by the {@code displayType} parameter 
     * (see {@link URLParameters#getParamDisplayType()}) to obtain a JSON view.
     */
    this.DISPLAY_TYPE_JSON = function() {
    	return displayTypeJson;
    }

    //*********************************************
    // PRIVATE FUNCTIONS
    //*********************************************
    /**
     * Initialization
     * 
     * @param queryString
     * @param encodeUrl             A {@code boolean} to tell whether to encode the url or not. 
     * 								Default is {@code true}.
     * @param parametersSeparator   A {@code String} used as parameters separator. Default is 
     * 								'&'.
     */
    function init(queryString, encodeUrl, parametersSeparator){
        
        paramValues = new Array();

        //reqEncodeUrl is also set to true when encodeUrl is null or undefined
        if (encodeUrl === false) {
            reqEncodeUrl = encodeUrl;
        } else {
        	reqEncodeUrl = true;
        }
        
        reqParametersSeparator = parametersSeparator;
        //default value
        if (!parametersSeparator) {
        	reqParametersSeparator = '&';
        }
        
        urlHash = null;

        loadParametersFromRequest(queryString);
    };
    /**
     * Encode String to be used in URLs. 
     * This method is different from the {@code encodeURL} method 
     * of {@code HttpServletResponse}, as it does not include a logic 
     * for session tracking. It just converts special chars to be used in URL.
     * The encoding can be desactivated by setting the {@code encodeUrl} attribute to
     * {@code false}.
     * 
     * @param url   the {@code String} to be encoded.
     * @return  a {@code String} encoded, if needed (meaning, if including special chars), 
     *          and if the {@code encodeUrl} attribute is {@code true}
     * 
     * @see #encodeUrl
     */
    function urlEncode(url){
        var encodeString = url;
        if (!reqEncodeUrl) {
            return encodeString;
        }
        encodeString = encodeURIComponent(url);
        return encodeString;
    };
    /**
     * Determine whether {@code paramValue} is a {@code String} corresponding to 
     * the {@code boolean} value {@code true} in the Bgee web-app. 
     * 
     * @param paramValue    A {@code String} corresponding to the value of a parameter 
     *                      in a request, to be converted into a {@code boolean}.
     * @return  a {@code boolean} corresponding to {@code paramValue}. 
     *          Return {@code true} if {@code paramValue} is equal to "on", "true", or "1".
     */
    function castToBoolean(paramValue){
        if (paramValue == "on" || paramValue == "true" || paramValue == "1") {
        	return true;
        }
        return false;
    };
    
    /**
     * Load the parameters that are present in the provided query string or
     * in the current URL if no string is provided.
     * Note : to load an empty requestParameters, pass the value ""
     * 
     * @param queryString   A {@code String}, the query to load parameters from
     */
    function loadParametersFromRequest(queryString){
        // In case queryString is null or undefined
        if(!queryString){
            queryString = "";
        }
        // Browse all available parameters
        var parametersAssocArr = getQueryStringVars(queryString,true);
        for (i in urlParameters.getList()){    
            var parameter = urlParameters.getList()[i];
            // Fetch the string values from the URL
            var valuesFromUrl = parametersAssocArr[parameter.name]
            // If the param is set, check that the values are correct and store them
            if(valuesFromUrl != null){
                if(!parameter.allowsMultipleValues && valuesFromUrl instanceof Array){
                    throw(parameter.name + " does not accept mutliple values");
                }
                if(valuesFromUrl instanceof Array){
                    paramValues[parameter.name] = new Array();
                    for(j in valuesFromUrl){
                        paramValues[parameter.name][j] =  secureString(valuesFromUrl[j], 
                                parameter);
                    }
                }
                else{
                    paramValues[parameter.name] = secureString(valuesFromUrl, parameter);
                }

            }
        }
    };
    /**
     * Get parameters from the search part and/or the hash part of an URL, 
     * and return them as an associative array.
     * 
     * @param   queryString         a <code>String</code> representing the search part 
     *                              (with the initial '?') and/or hash part 
     *                              (with the initial {@link #jsHashSeparator}) of an URL, 
     *                              to be parsed to extract parameters
     *                              and to return them as an associative array
     * @param   parametersEncoded   a <code>boolean</code> <code>true</code> if the 
     *                              parameters are URL encoded, and need to be decoded.
     * @return  an associative array where the keys are parameter names, and values are 
     *          parameter values, extracted from the argument <code>queryString</code>.
     * source: http://stackoverflow.com/a/3855394
     */
    function getQueryStringVars(queryString, parametersEncoded)
    {
    	var query = "";
    	
    	//remove the '?' from search part of the URL
        if (queryString.substr(0, 1) == '?') {
        	query = queryString.substr(1);
        	
        } else if (queryString.substr(0, jsHashSeparator.length) == jsHashSeparator) {
            //if only the hash part was provided, remove the hash separator 
            //from the beginning of the query
        	query = queryString.substr(jsHashSeparator.length);
        	
        } else if (queryString.substr(0, 1) == '#') {
            //same for 'classical' hash.
        	//Note: do not use a OR in the first condition, 
        	//we need to check jsHashSeparator first, otherwise you could be left 
        	//with a '!' or something like that.
        	query = queryString.substr(1);
        }
    	
    	//now, make the search part and the hash part a single query string
    	var querySplit = query.split(jsHashSeparator);
    	if (querySplit.length > 2) {
    		throw("Too many hash separators in query string");
    	}
    	query = querySplit[0];
    	if (querySplit.length > 1) {
    		query += "&" + querySplit[1];
    	}
    	//do it again on the new query with "classical" hash separator
    	querySplit = query.split('#');
    	if (querySplit.length > 2) {
    		throw("Too many hash separators in query string");
    	}
    	query = querySplit[0];
    	if (querySplit.length > 1) {
    		query += "&" + querySplit[1];
    	}
    	
    	//now, get parameters and parameter values
        var a = query.split('&');
        if (a === "") return {};
        var b = {};
        for (var i = 0; i < a.length; ++i)
        {
            var p=a[i].split('=');
            if (p.length !== 2) continue;
            var valueTemp = p[1];
            if (parametersEncoded === true) {
                valueTemp = decodeURIComponent(p[1].replace(/\+/g, " "));
            }
            var value = valueTemp;
            if (value === "") continue;
            var paramName = p[0];
            if (b[paramName] !== undefined) {
                if (typeof b[paramName] === "string") {
                    var previousValue = b[paramName];
                    b[paramName] = new Array();
                    b[paramName].push(previousValue);
                }
                b[paramName].push(value);
            } else {
                b[paramName] = value;
            }
        }
        return b;
    };
    
    /**
     * Return the values associated to a {@code Parameter} as a {@code String} usable in URLs. 
     * For instance, if the parameter provided is {@code getParamPage()}, this function 
     * could return a {@code String} looking as 'page=download&'.
     * <p>
     * All parameter values are URL encoded, and each parameter/value couple is appended 
     * with {@code parametersSeparator}.
     * 
     * @param parameter				A {@code Parameter} for which we want to retrieve 
     * 								the associated values, to store them in URLs.
     * @param parametersSeparator   A {@code String} that is used as parameters separator
     *                              in the URL.
     */
    function parameterValuesToQueryString(parameter, parametersSeparator) {
    	var urlFragment = "";
    	var parameterValues = paramValues[parameter.name];
		if(!(parameterValues instanceof Array) && parameterValues != undefined){
			parameterValues = new Array(parameterValues);
		}
		if(parameterValues != undefined){
			for(j in parameterValues){
				urlFragment += parameter.name+ "=";
				urlFragment += urlEncode(parameterValues[j]) + parametersSeparator;
			}
		}
		return urlFragment;
    };
    
    /**
     * Perform security controls and prepare the submitted {@code String} for use. It includes
     * a check of the {@code String} length and the format of the {@code String}.
     * 
     * @param stringToCheck    A {@code String} to be checked 
     * @param parameter        The {@code urlparameters.Parameter} the {@code String} has to be
     *                         secured for. If its maxSize is greater than 0 and if the length
     *                         of {@code stringToCheck} is greater than its maxSize, this method
     *                         returns an empty string. If {@code stringToCheck} is equal to 0,
     *                         no control are performed on string length (but other modifications
     *                         are still performed, such as triming the {@code String}). 
     *                         Furthermore, the format properties of the {@code urlparameters.Parameter}
     *                         contains a regular expression that {@code stringToCheck} should match.
     *                         
     * @return a secured and prepared {@code String}. Return an empty String the stringToCheck
     *         was null
     */
    function secureString(stringToCheck, parameter)
    {                        
        if (stringToCheck == null) {
            return "";
        }
        else if(parameter.maxSize != 0 && stringToCheck.length > parameter.maxSize){
            throw(parameter.name + " is too long");
        }
        else if(parameter.format != null && ! new RegExp(parameter.format).test(stringToCheck)){
            throw(parameter.name + " does not match the required format");
        }
        return String(stringToCheck).trim();
    }
    
    //*********************************************
    // PUBLIC FUNCTIONS
    //*********************************************
    /**
     * Add a value to the given {@code urlparameters.Parameter}
     * It resets (i.e. remove it) the key ( data ) when a value is added to a storable 
     * parameter. In this case, all the parameters that were formerly included in the key have
     * to be provided again.
     *  
     * @param parameter The {@code urlparameters.Parameter} to add the value to
     * 
     * @param value     The value to set
     */    
    this.addValue = function(parameter, value){
        // Secure the value
        if(value != null){
            value = secureString(value, parameter);
        }
        // fetch the existing values for the given parameter and try to add the value
        parameterValues = paramValues[parameter.name];
        // Throw an exception if the param does not allow 
        // multiple values and has already one
        if (!parameter.allowsMultipleValues && parameterValues != null){
            throw(parameter.name + " does not accept mutliple values");
        }
        if(parameterValues == undefined){
            parameterValues = new Array();
        }
        if(!(parameterValues instanceof Array)){
            parameterValues = new Array(parameterValues);
        }
        parameterValues.push(value);
        paramValues[parameter.name] = parameterValues;
        // Reset the key if the parameter is storable because the key is now obsolete
        if(parameter.isStorable){
            paramValues[urlParameters.getParamData().name] = null;
        }
    };
    
    /**
     * Generate the 'hash' part of an URL from the current state of the parameters. 
     * This method should be used when a script needs to modify {@code window.location.hash}. 
     * All the parameters set in this object will all be stored in the 'hash' part.
     * This method should not be used to get URLs to perform AJAX queries to the server, 
     * or to add a link in the current page. For this latter use, 
     * see the {@code getRequestURL} method.
     * <p>
     * The returned {@code String} will start with the appropriate character, 
     * so that when setting {@code window.location.hash}, the full URL 
     * will contain the appropriate hash separator. For instance, 
     * if '#!' is used as hash separator, the returned {@code String} will start with '!'.
     * <p>
     * The separator between parameters is the one provided as argument of this method; 
     * if not provided, it will be the default separator '&', or the separator 
     * provided to the constructor, or set afterwards using 
     * {@link #setParametersSeparator(String)}.
     * 
     * @param parametersSeparator   A {@code String} that is used as custom parameters separator
     *                              in the URL. If left empty, the parameter provided to the constructor
     *                              or set afterwards with {@code setParametersSeparator} is used. 
     * @return A {@code String} to be used in the hash part of an URL.
     */
    this.getRequestHash = function(parametersSeparator) {
        var urlFragment = '';
        if(! parametersSeparator){
            parametersSeparator = reqParametersSeparator;
        }
        
        var paramAdded = false;
    	for (i in urlParameters.getList()){   
            
    		// Fetch the values of this param and generate a query with all
    		// its values
    		var paramString = parameterValuesToQueryString(
    				urlParameters.getList()[i], parametersSeparator);
    		if (paramString.length > 0) {
    		    urlFragment += paramString;
                paramAdded = true;
    		}
    	}
    	
    	// Remove the extra separator at the end, add the hash separator
        if(paramAdded){
            urlFragment = addToHashSeparator + urlFragment.substring(0, 
            		urlFragment.length - parametersSeparator.length);
        }

        return urlFragment;
    };
    
    /**
     * Generate an URL from the current state of the parameters. This method should be used  
     * to get URLs either to perform AJAX queries to the server, or to add a link 
     * in the current page. To retrieve only the 'hash' part of an URL in order 
     * to modify {@code window.location.hash}, see the {@code getRequestHash} method.
     * <p>
     * This method generates the 'search' part and the 'hash' part of the URL, 
     * and appends it to the URL start to query the Bgee web-app (either {@code urlStart} 
     * if provided, or {@code GLOBAL_PROPS.getWebAppURLStart()} by default). The separator 
     * between parameters is the one provided as argument of this method; if not provided, 
     * it will be the default separator '&', or the separator provided to the constructor, 
     * or set afterwards using {@link #setParametersSeparator(String)}.
     * <p>
     * Only in order to add a link in the current page, it is possible 
     * to distinguish parameters to be stored in the search part of the URL, 
     * or the hash part of the URL (for AJAX queries, all parameters should always be 
     * in the search part...). This is used for generating correct links to pages reading/writing 
     * parameters in javascript from the hash. If {@code searchOrHashParams} is {@code null}, 
     * all parameters will be stored in the search part. Otherwise, if {@code areSearchParams} 
     * is {@code true}, the {@code Parameter}s in {@code searchOrHashParams} will be stored 
     * in the search part, all the others in the hash part; if {@code areSearchParams} 
     * is {@code false}, the {@code Parameter}s in {@code searchOrHashParams} will be stored 
     * in the hash part, all the others in the search part.
     * 
     * @param addAjaxParam			A {@code boolean} defining whether the parameter 
     * 								allowing to specify that a request is an AJAX query 
     * 								should be added. 
     * @param searchOrHashParams    An {@code Array} of {@code Parameter}s, allowing to define 
     *                              the parameters to store in the search part or the hash part 
     *                              of the URLs. 
     * @param areSearchParams       A {@code boolean} defining where to store 
     *                              the {@code Parameters} in {@code searchOrHashParams}: 
     *                              if {@code true}, they will be stored in the search part, 
     *                              all the others in the hash part. The opposite 
     *                              if {@code false}.
     * @param parametersSeparator   A {@code String} that is used as custom parameters separator
     *                              in the URL. If left empty, the parameter provided to the constructor
     *                              or set afterwards with {@code setParametersSeparator} is used
     * @param urlStart			 	A {@code String} that is the beginning of the URL 
     * 								to used to query the Bgee web-app, before the search part, 
     * 								e.g. 'http://bgee.org/bgee_v13/'.  
     * 								If this parameter is not provided, by default 
     * 								{@code GLOBAL_PROPS.getWebAppURLStart()} is used.
     * 								It can be used, e.g., to perform a cross-domain query 
     * 								to a different Bgee server (useful for testing).
     * 
     * @return  A {@code String} that is the generated URL.
     */
    this.getRequestURL = function(addAjaxParam, searchOrHashParams, areSearchParams, 
    		parametersSeparator, urlStart){
        var urlFragment = "";
        if(! parametersSeparator){
            parametersSeparator = reqParametersSeparator;
        }
        if (!urlStart) {
        	urlStart = GLOBAL_PROPS.getWebAppURLStart();
        }
        
        //If requested, add the parameter allowing to specify that a query is an AJAX query.
        if (addAjaxParam) {
            this.resetValues(urlParameters.getParamAjax());
            this.addValue(urlParameters.getParamAjax(), "1");
        }
        
        // Browse all available parameters
        // We will potentially do it twice, to store the parameters either in the search part, 
        //or the hash part of the URL, depending on searchOrHashParams and areSearchParams.
        var hashDone = false;
        var searchDone = false;
        while (!searchDone || !hashDone) {
        	if (searchOrHashParams == null) {
                //no need for a second pass if no param needed in hash
                hashDone = true;
            }
            var paramAdded = false;
            var firstParam = true;
        	for (i in urlParameters.getList()){ 
        		var parameter = urlParameters.getList()[i];
        		//if a split between parameters in search and hash parts has been requested 
                if (searchOrHashParams != null) {
                    //first pass, store parameters in the search part of the URL
                    if (!searchDone) {
                        if (areSearchParams && searchOrHashParams.indexOf(parameter) == -1 || 
                            !areSearchParams && searchOrHashParams.indexOf(parameter) != -1) {
                            //parameter requested in hash, skip
                            continue;
                        }
                    } else {
                        //second pass, store parameters in the hash part of the URL
                        if (areSearchParams && searchOrHashParams.indexOf(parameter) != -1 || 
                            !areSearchParams && searchOrHashParams.indexOf(parameter) == -1) {
                            //parameter requested in search part, skip
                            continue;
                        }
                    }
                }
                
        		// Fetch the values of this param and generate a query with all
        		// its values
        		var paramString = parameterValuesToQueryString(
        				parameter, parametersSeparator);
        		if (paramString.length > 0) {
                    //if this is the first parameter stored in the search or hash part, 
                    // we add the '?' or the hash separator.
                    if (firstParam) {
                    	if (!searchDone) {
                            urlFragment += '?';
                    	} else {
                    		urlFragment += jsHashSeparator;
                    	}
                    }
                    firstParam = false;
                    
                    //store param and value in URL
        		    urlFragment += paramString;
                    paramAdded = true;
        		}
        	}
        	
        	// Remove the extra separator at the end 
            if(paramAdded){
                urlFragment = urlFragment.substring(0, 
                		urlFragment.length - parametersSeparator.length);
            }
            
            //if searchDone is true, the first pass was already done, 
            //this was the end of the second pass.
            if (searchDone) {
                hashDone = true;
            }
            //will be set to true at the end of the first pass.
            searchDone = true;
        }
        
        var url = urlStart;
        if (urlFragment){
            url += urlFragment;
        }
        //if hash needs to be added, set through setURLHash (to really link to an element 
        //with corresponding ID on a page, not to provide parameters readable/writable 
        //with javascript),
        if (this.getURLHash()) {
            //check whether the hash is already used to store data parameters, 
        	//we look for the hash separator when used for storing data parameters.
            if (urlFragment.indexOf(jsHashSeparator) > -1) {
                throw ("It is not possible "
                        + "to store data parameters in the hash part of URLs "
                        + "while also trying to use a classical anchor (you previously called "
                        + "the method setURLHash on this object).");
            }
            url += "#" + this.getURLHash();
        }
        
        return url;
    };
    
    /**
     * Return the values of the of the given {@code urlparameters.Parameter}
     * It can be an Array or a single value or null if empty
     * 
     * @param parameter     the {@code urlparameters.Parameter} 
     *                      that corresponds to the value to be returned
     *                  
     * @return  the values
     */
    this.getValues = function(parameter){
        if(paramValues[parameter.name] != undefined){
            return paramValues[parameter.name];
        }
        else{
            return null;
        }
    };
    /**
     * Return the first value of the given {@code urlparameters.Parameter} 
     * or null if it is empty. It is a safe guarantees to get a unique value no matter whether
     * the content is an Array or not.
     * 
     * @param parameter     the {@code urlparameters.Parameter} 
     *                      that corresponds to the value to be returned
     *                  
     * @return  A unique value
     */
    this.getFirstValue = function(parameter){
        if(paramValues[parameter.name] != undefined && paramValues[parameter.name] instanceof Array){
            return paramValues[parameter.name][0];
        }
        else if(paramValues[parameter.name] != undefined){
            return paramValues[parameter.name];
        }
        else{
            return null;
        }
    };
    /**
     * Reset the value for the given {@code urlparameters.Parameter}
     *  
     * @param parameter The {@code urlparameters.Parameter} to reset
     */
    this.resetValues = function(parameter){
        paramValues[parameter.name] = null;
    };

    
    /**
     * Convenient method to retrieve value of the parameter returned by 
     * {@link URLParameters#getParamPage()}. Equivalent to calling 
     * {@link #getFirstValue(Parameter)} for this parameter.
     * 
     * @return  A {@code String} that is the value of the {@code page} URL parameter. 
     *          Can be {@code null}. 
     */
    this.getPage = function() {
        return this.getFirstValue(urlParameters.getParamPage());
    };
    /**
     * Convenient method to set value of the parameter returned by 
     * {@link URLParameters#getParamPage()}. Equivalent to calling 
     * {@link #addValue(Parameter, Object)} for this parameter.
     * 
     * @param action    A {@code String} that is the value of the {@code page} URL parameter 
     *                  to set.
     */
    this.setPage = function(page) {
    	this.resetValues(urlParameters.getParamPage());
        this.addValue(urlParameters.getParamPage(), page);
    };
    /**
     * Convenient method to retrieve value of the parameter returned by 
     * {@link URLParameters#getParamAction()}. Equivalent to calling 
     * {@link #getFirstValue(Parameter)} for this parameter.
     * 
     * @return  A {@code String} that is the value of the {@code action} URL parameter. 
     *          Can be {@code null}. 
     */
    this.getAction = function() {
        return this.getFirstValue(urlParameters.getParamAction());
    };
    /**
     * Convenient method to set value of the parameter returned by 
     * {@link URLParameters#getParamAction()}. Equivalent to calling 
     * {@link #addValue(Parameter, Object)} for this parameter.
     * 
     * @param action    A {@code String} that is the value of the {@code action} URL parameter 
     *                  to set.
     */
    this.setAction = function(action) {
    	this.resetValues(urlParameters.getParamAction());
        this.addValue(urlParameters.getParamAction(), action);
    };
    /**
     * Convenient method to retrieve value of the parameter returned by 
     * {@link URLParameters#getParamData()}. Equivalent to calling 
     * {@link #getFirstValue(Parameter)} for this parameter.
     * 
     * @return  A {@code String} that is the value of the {@code data} URL parameter. 
     *          Can be {@code null}. 
     */
    this.getDataKey = function() {
        return this.getFirstValue(urlParameters.getParamData());
    };
    /**
     * Convenient method to set value of the parameter returned by 
     * {@link URLParameters#getParamData()}. Equivalent to calling 
     * {@link #addValue(Parameter, Object)} for this parameter.
     * 
     * @param getParamData	A {@code String} that is the value of the {@code data} URL parameter 
     *                  	to set.
     */
    this.setDataKey = function(data) {
    	this.resetValues(urlParameters.getParamData());
        this.addValue(urlParameters.getParamData(), data);
    };
    
    /**
     * @return A {@code String} that will be used as the hash part of URLs returned by 
     *         the  {@code getRequestURL} methods. See {@link #setURLHash(String)} 
     *         for more details.
     * @see #setURLHash(String)
     */
    this.getURLHash = function() {
        return urlHash;
    }
    /**
     * Set the 'hash' to be added at the end of the URLs generated by the {@code getRequestURL} 
     * methods. This method should be used only to actually link to an element 
     * with the corresponding ID in a page. It should not be used to use the hash 
     * to store data parameters (for instance, to link to pages where the hash part 
     * is used by javascript to read/write data parameters). For this latter use, 
     * see the {@code #getRequestURL} methods.
     * <p>
     * Note that {@code urlHash} must not include the hash separator ('#').
     * 
     * @param hash      A {@code String} that will be used as the hash part of URLs returned by 
     *                  the  {@code getRequestURL} methods.
     */
    this.setURLHash = function(hash) {
        urlHash = hash;
    };

    /**
     * Convenient method to set value of the parameter returned by 
     * {@link URLParameters#getParamAction()}. Equivalent to calling 
     * {@link #addValue(Parameter, Object)} for this parameter.
     * 
     * @param action    A {@code String} that is the value of the {@code action} URL parameter 
     *                  to set.
     */
    this.setDisplayType = function(display) {
    	this.resetValues(urlParameters.getParamDisplayType());
        this.addValue(urlParameters.getParamDisplayType(), display);
    };
    /**
     * @return  A {@code boolean} to tell whether the display is Xml or not
     */
    this.isXmlDisplayType = function() {
        if(this.getFirstValue(urlParameters.getParamDisplayType()) != null &&
                this.getFirstValue(urlParameters.getParamDisplayType()) == this.DISPLAY_TYPE_XML()){
            return true;
        }
        return false;
    };
    /**
     * @return  A {@code boolean} to tell whether the display is Csv or not
     */
    this.isCsvDisplayType = function() {
        if(this.getFirstValue(urlParameters.getParamDisplayType()) != null &&
                this.getFirstValue(urlParameters.getParamDisplayType()) == this.DISPLAY_TYPE_CSV()){
            return true;
        }
        return false;
    };
    /**
     * @return  A {@code boolean} to tell whether the display is Tsv or not
     */
    this.isTsvDisplayType = function() {
        if(this.getFirstValue(urlParameters.getParamDisplayType()) != null &&
                this.getFirstValue(urlParameters.getParamDisplayType()) == this.DISPLAY_TYPE_TSV()){
            return true;
        }
        return false;
    };
    /**
     * @return  A {@code boolean} to tell whether the display is JSON or not
     */
    this.isJsonDisplayType = function() {
        if(this.getFirstValue(urlParameters.getParamDisplayType()) != null &&
                this.getFirstValue(urlParameters.getParamDisplayType()) == this.DISPLAY_TYPE_JSON()){
            return true;
        }
        return false;
    };
    /**
     * Allow to know if this request has been performed through AJAX. 
     * 
     * @return  {@code true} if this request was performed through AJAX
     */
    this.isAnAjaxRequest = function() {
    	if (this.getFirstValue(urlParameters.getParamAjax()) != null) {
            return this.castToBoolean(
            		this.getFirstValue(urlParameters.getParamAjax()).toLowerCase());
        }
        return false;
    };
    /**
     * @return  A {@code boolean} to tell whether the page corresponds to the homepage
     */
    this.isTheHomePage = function(){
        if(this.getFirstValue(urlParameters.getParamPage()) == null){
            return true;
        }
        return false;
    };
    /**
     * @return  A {@code boolean} to tell whether the request corresponds to a page of the
     * category "about"
     */
    this.isAnAboutPageCategory = function()
    {
        if (this.getFirstValue(urlParameters.getParamPage()) != null && 
                this.getFirstValue(urlParameters.getParamPage()) == this.PAGE_ABOUT()) {
            return true;
        }
        return false;
    };
//    /**
//     * @return  A {@code boolean} to tell whether the request corresponds to a page of the
//     * category "anatomy"
//     */
//    this.isAnAnatomyPageCategory = function()
//    {
//        if (this.getFirstValue(urlParameters.getParamPage()) != null && 
//                this.getFirstValue(urlParameters.getParamPage()) == "anatomy") {
//            return true;
//        }
//        return false;
//    };
    /**
     * @return  A {@code boolean} to tell whether the request corresponds to a page of the
     * category "documentation"
     */
    this.isADocumentationPageCategory = function()
    {
        if (this.getFirstValue(urlParameters.getParamPage()) != null && 
                this.getFirstValue(urlParameters.getParamPage()) == this.PAGE_DOCUMENTATION()) {
            return true;
        }
        return false;
    };
    /**
     * @return  A {@code boolean} to tell whether the request corresponds to a page of the
     * category "download"
     */
    this.isADownloadPageCategory = function(){
        if(this.getFirstValue(urlParameters.getParamPage()) != null &&
                this.getFirstValue(urlParameters.getParamPage()) == this.PAGE_DOWNLOAD()){
            return true;
        }
        return false;
    };   
    /**
     * @return  A {@code boolean} to tell whether the request corresponds to a page of the
     * 			category "topAnat"
     */
    this.isATopAnatPageCategory = function(){
        if(this.getFirstValue(urlParameters.getParamPage()) != null &&
                this.getFirstValue(urlParameters.getParamPage()) == this.PAGE_TOP_ANAT()){
            return true;
        }
        return false;
    };   
//    /**
//     * @return  A {@code boolean} to tell whether the request corresponds to a page of the
//     * category "expression"
//     */
//    this.isAnExpressionPageCategory = function()
//    {
//        if (this.getFirstValue(urlParameters.getParamPage()) != null && 
//                this.getFirstValue(urlParameters.getParamPage()) == "expression"){
//            return true;
//        }
//        return false;
//    };
//    /**
//     * @return  A {@code boolean} to tell whether the request corresponds to a page of the
//     * category "gene"
//     */
//    this.isAGenePageCategory = function()
//    {
//        if (this.getFirstValue(urlParameters.getParamPage()) != null && 
//                this.getFirstValue(urlParameters.getParamPage()) == "gene"){
//            return true;
//        }
//        return false;
//    };
//    /**
//     * @return  A {@code boolean} to tell whether the request corresponds to a page of the
//     * category "gene_family"
//     */
//    this.isAGeneFamilyPageCategory = function()
//    {
//        if (this.getFirstValue(urlParameters.getParamPage()) != null && 
//                this.getFirstValue(urlParameters.getParamPage()) == "gene_family"){
//            return true;
//        }
//        return false;
//    };
//    /**
//     * @return  A {@code boolean} to tell whether the request corresponds to a page of the
//     * category "log"
//     */
//    this.isALogPageCategory = function()
//    {
//        if (this.getFirstValue(urlParameters.getParamPage()) != null &&
//                this.getFirstValue(urlParameters.getParamPage()) == "log"){
//            return true;
//        }
//        return false;
//    };
//    /**
//     * @return  A {@code boolean} to tell whether the request corresponds to a page of the
//     * category "news"
//     */
//    this.isANewsPageCategory = function()
//    {
//        if (this.getFirstValue(urlParameters.getParamPage()) != null && 
//                this.getFirstValue(urlParameters.getParamPage()) == "news"){
//            return true;
//        }
//        return false;
//    };
//    /**
//     * @return  A {@code boolean} to tell whether the request corresponds to a page of the
//     * category "registration"
//     */
//    this.isARegistrationPageCategory = function()
//    {
//
//        if (this.getFirstValue(urlParameters.getParamPage()) != null &&
//                this.getFirstValue(urlParameters.getParamPage()) == "registration"){
//            return true;
//        }
//        return false;
//    };
//    /**
//     * @return  A {@code boolean} to tell whether the request corresponds to a page of the
//     * category "search"
//     */
//    this.isASearchPageCategory = function()
//    {
//        if (this.getFirstValue(urlParameters.getParamPage()) != null && 
//                this.getFirstValue(urlParameters.getParamPage()) == "search"){
//            return true;
//        }
//        return false;
//    };

    /**
     * Determine whether the requested page contains sensitive information, 
     * such as passwords.
     * Such pages should then not be cached, or the URL be stored in the database, etc.
     * 
     * @return  {@code true} if the page contains sensitive information, {@code false} otherwise.
     */
    this.isASecuredPage = function() {
    	//TODO: implement when necessary (logging page, registration page, ...)
        return false;
    };

    /**
     * Change the {@code boolean} defining whether parameters should be url encoded 
     * by the {@code encodeUrl} method.
     * @param encodeUrl A {@code boolean} defining whether parameters should be url encoded 
     *                  by the {@code encodeUrl} method.
     */
    this.setEncodeUrl = function(encodeUrl) {
        reqEncodeUrl = encodeUrl;
    };
    /**
     * Change the {@code String} defining the character(s) that are used as parameters 
     * separator in the URL   
     * @param parametersSeparator   A {@code String} defining the character(s) that are used as 
     *                              parameters separator in the URL   
     */
    this.setParametersSeparator = function(parametersSeparator) {
        reqParametersSeparator = parametersSeparator;
    };
    
    //  Init the instance of this class ( kind of call to the constructor )
    init(queryString, encodeUrl, parametersSeparator);

};