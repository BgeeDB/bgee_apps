<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.bgee</groupId>
        <artifactId>bgee-applications</artifactId>
        <version>13</version>
    </parent>

    <artifactId>bgee-webapp</artifactId>
    <packaging>war</packaging>
    <name>bgee-webapp</name>

    <dependencies>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>bgee-core</artifactId>
        </dependency>
        <!-- Not clear if we need to include these dependencies, 
             or if they will be shipped directly by bgee-core -->
         <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>bgee-dao-api</artifactId>
            <version>${project.version}</version>
        </dependency>
         <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>bgee-dao-sql</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.bgee.log4jdbc-log4j2</groupId>
            <artifactId>log4jdbc-log4j2-jdbc4.1</artifactId>
            <scope>compile</scope>
        </dependency>
        
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.3.1</version>
        </dependency>
        <!-- Remove these dependencies as long as the webapp does not use 
            the actual Bgee API <dependency> <groupId>${project.groupId}</groupId> <artifactId>bgee-core</artifactId> 
            <version>${project.version}</version> <scope>compile</scope> </dependency> 
            <dependency> <groupId>${project.groupId}</groupId> <artifactId>bgee-dao-api</artifactId> 
            <version>${project.version}</version> <scope>compile</scope> </dependency> -->
        <!-- as long as bgee-dao-sql is the only service provider for bgee-dao-api, 
            we keep this dependency. When other service providers will be available, 
            this dependency might be changed for another service provider -->
        <!-- <dependency> <groupId>${project.groupId}</groupId> <artifactId>bgee-dao-sql</artifactId> 
            <version>${project.version}</version> <scope>compile</scope> </dependency> -->

        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-servlet-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>

        <dependency>
            <groupId>org.terracotta.bigmemory</groupId>
            <artifactId>bigmemory</artifactId>
        </dependency>

        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-ee</artifactId>
        </dependency>

        <!-- IMPORTANT : Keep this dependency (with 'provided' scope in bgee-application 
            pom.xml) even if it is not used, as ehcache-core is replaced by ehcache-ee 
            to use bigmemory. The reason is that it is somehow automatically included 
            with ehcache-web if not explicitly declared here, and conflicts with ehcache-ee 
            when deployed. -->
        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-core</artifactId>
        </dependency>

        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        
        <!-- Filter for topanat-dev, enabling cross-domain queries 
             (will make local development easier), 
             see http://stackoverflow.com/a/30319456/1768736  -->
        <dependency>
            <groupId>com.thetransactioncompany</groupId>
            <artifactId>cors-filter</artifactId>
        </dependency>

    </dependencies>

    <properties>
        <!-- properties used to rename css and js files with version number, 
             to avoid caching issues with proxis/web browers. Corresponds by default 
             to the project version number, but we might have additional updates of these files. -->
        <!-- WARNING: never removes these properties, otherwise your files will be named, e.g., 
             *${filter.org.bgee.webapp.css.version.extension}.css. If you want to disable 
             versioning of CSS and JS files, just leave these properties empty. -->
        <filter.org.bgee.webapp.css.version.extension>${project.version}i</filter.org.bgee.webapp.css.version.extension>
        <filter.org.bgee.webapp.javascript.version.extension>${project.version}i</filter.org.bgee.webapp.javascript.version.extension>
        <!-- This property defines where the minified CSS and JS files will be stored. 
             This is useful to be able to change this setting when running the webapp from within Eclipse 
             (Eclipse acquires its resources before any plugin can process them, so we modify 
             this property when running the webapp from within Eclipse, to write the minified files 
             directly into the m2e-wtp 'web-resources' folder) -->
        <minify.webappTargetDir>${project.build.directory}/${project.build.finalName}</minify.webappTargetDir>
        <!-- These property specify whether minified CSS and JS files will be used by the webapp. 
             This allows to use the original files for easier debugging, notably when running the webapp 
             from within Eclipse.  -->
        <filter.org.bgee.webapp.minify>true</filter.org.bgee.webapp.minify>
    </properties>
    
    <!-- There is a problem when running the webapp from Eclipse: m2e-wtp acquires 
         the web-resources before any lifecycle can be launched, so, before 
         minify-maven-plugin can minify the files. We define a profile so that 
         minify-maven-plugin copies the files directly into the m2e-wtp web-resources directory, 
         when running from Eclipse. 
         We also use this profile to be able to NOT use the minified CSS and JS files when the webapp 
         is run from within Eclipse, for easier debugging. -->
    <profiles>
        <profile>
            <id>m2e</id>
            <!-- This profile is only active when the property "m2e.version"
                 is set, which is the case when building in Eclipse with m2e, 
                 see http://stackoverflow.com/a/21574285/1768736. -->
            <activation>
                <property>
                    <name>m2e.version</name>
                </property>
            </activation>
            <properties>
                <!-- change paths where minify-maven-plugin minifies files -->
                <minify.webappTargetDir>${project.build.directory}/m2e-wtp/web-resources/</minify.webappTargetDir>
                <!-- Disable minify for easier debugging. Just change this property 
                     to use minified files, to properly test a release as it will be 
                     in production server. -->
                <filter.org.bgee.webapp.minify>false</filter.org.bgee.webapp.minify>
                <!-- In order to have no extension in URLs, change tomcat context root 
                     (this is buggy in Eclipse) -->
                <m2eclipse.wtp.contextRoot></m2eclipse.wtp.contextRoot>
            </properties>
        </profile>
    </profiles>
      
      
    <build>
        <finalName>bgee-webapp-${project.version}</finalName>
        
        <!-- When running server from Eclipse, we need to tell m2e to execute 
             minify-maven-plugin, to properly minify css and js files, by default it doesn't. 
             We need to modify the life cycle mapping, see 
             https://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html. -->
        <pluginManagement>
            <plugins>
                <!-- This plugin is not a real one, it is only used by m2e to obtain 
                     config information. This is why it needs to be put in the section 
                     pluginManagement, otherwise Maven would try to download it. -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>com.samaxes.maven</groupId>
                                        <artifactId>minify-maven-plugin</artifactId>
                                        <versionRange>[1.0.0,)</versionRange>
                                        <goals>
                                            <goal>minify</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <execute>
                                            <!-- set to true, otherwise changes are not seen, 
                                            e.g., to a css file, and you would need to perform 
                                            a project update each time. -->
                                            <runOnIncremental>true</runOnIncremental>
                                        </execute >
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        
        <plugins>
            <!-- Minify CSS and JS files -->
            <plugin>
                <groupId>com.samaxes.maven</groupId>
                <artifactId>minify-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>minify_common_vendor</id>
                        <goals>
                            <!-- Binds by default to the lifecycle phase: process-resources -->
                            <goal>minify</goal>
                        </goals>
                        <configuration>
                            <webappTargetDir>${minify.webappTargetDir}</webappTargetDir>
                            <jsSourceDir>js/</jsSourceDir>
                            <jsTargetDir>js/minify/</jsTargetDir>
                            <jsSourceFiles>
                                <jsSourceFile>lib/jquery.min.js</jsSourceFile>
                                <jsSourceFile>lib/jquery_plugins/jquery.visible.min.js</jsSourceFile>
                                <jsSourceFile>lib/jquery_plugins/jquery-ui.min.js</jsSourceFile>
                            </jsSourceFiles>
                            <jsFinalFile>vendor_common.js</jsFinalFile>
                            <suffix>min${filter.org.bgee.webapp.javascript.version.extension}</suffix>
                        </configuration>
                    </execution>
                    <execution>
                        <id>minify_common_bgee</id>
                        <goals>
                            <!-- Binds by default to the lifecycle phase: process-resources -->
                            <goal>minify</goal>
                        </goals>
                        <configuration>
                            <webappTargetDir>${minify.webappTargetDir}</webappTargetDir>
                            <jsSourceDir>js/</jsSourceDir>
                            <jsTargetDir>js/minify/</jsTargetDir>
                            <jsSourceFiles>
                                <jsSourceFile>bgeeproperties.js</jsSourceFile>
                                <jsSourceFile>urlparameters.js</jsSourceFile>
                                <jsSourceFile>requestparameters.js</jsSourceFile>
                                <jsSourceFile>common.js</jsSourceFile>
                            </jsSourceFiles>
                            <jsFinalFile>script_common.js</jsFinalFile>
                            <suffix>min${filter.org.bgee.webapp.javascript.version.extension}</suffix>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    
                    <!-- We do no exclude source CSS and JS files from the WAR: 
                         this will make a larger archive, but it will allow to easily 
                         activate/deactivate the use of minified files, for easier debugging. -->
                    
                    <webResources>
                        <!-- We have a problem with m2e-wtp, the resources in src/main/webapp/ 
                             are not considered. We need to explicitly list this folder 
                             in the webResources to fix the problem (we shouldn't have to)  -->
                        <resource>
                            <!-- this is relative to the pom.xml directory -->
                            <directory>src/main/webapp/</directory>
                            <includes>
                                <include>**</include>
                            </includes>
                            <!-- override the destination directory for this resource, 
                                 relative to the root of the WAR file -->
                            <targetPath>/</targetPath>
                        </resource>
                        
                        <!-- We filter bgee-webapp.properties so that css version number 
                             and javacript version number are configured. 
                             bgee.dao.properties is filtered to add database connection parameters -->
                        <resource>
                            <!-- this is relative to the pom.xml directory -->
                            <directory>src/main/resources/</directory>
                            <includes>
                                <include>bgee.properties</include>
                                <include>bgee.dao.properties</include>
                            </includes>
                            <!-- Activates filtering -->
                            <filtering>true</filtering>
                            <!-- override the destination directory for this resource, 
                                 relative to the root of the WAR file -->
                            <targetPath>WEB-INF/classes</targetPath>
                        </resource>
                        <!-- log configuration files, no filtering -->
                        <resource>
                            <!-- this is relative to the pom.xml directory -->
                            <directory>src/main/resources/</directory>
                            <includes>
                                <include>log4j2.xml</include>
                            </includes>
                            <filtering>false</filtering>
                            <!-- override the destination directory for this resource, 
                                 relative to the root of the WAR file -->
                            <targetPath>WEB-INF/classes</targetPath>
                        </resource>
                        <!-- R resources -->
                        <resource>
                            <!-- this is relative to the pom.xml directory -->
                            <directory>src/main/resources/</directory>
                            <includes>
                                <include>R_scripts/</include>
                            </includes>
                            <filtering>false</filtering>
                            <!-- override the destination directory for this resource, 
                                 relative to the root of the WAR file -->
                            <targetPath>WEB-INF/classes</targetPath>
                        </resource>
                        
                    </webResources>
                    
                    <attachClasses>true</attachClasses>
                </configuration>
            </plugin>
            
            <!-- In order to properly test the class BgeeProperties, we need to ensure 
                 that tests are run one at a time. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <forkCount>1</forkCount>
                    <reuseForks>false</reuseForks>
                </configuration>
            </plugin>
        </plugins>
        
        
        <!-- In order to correctly filter bgee.properties even outside of the WAR file -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>bgee.properties</include>
                    <include>bgee.dao.properties</include>
                </includes>
            </resource>  
        </resources>
        
    </build>
</project>
