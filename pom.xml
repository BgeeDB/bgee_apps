<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                       http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.bgee</groupId>
	<artifactId>bgee-applications</artifactId>
	<packaging>pom</packaging>
	<version>13</version>
	<name>Bgee</name>
	<url>http://www.bgee.org/</url>
	<description>Bgee allows to automatically compare gene expression patterns between species, by referencing expression data on anatomical ontologies, and designing homology relationships between them.</description>
	<organization>
		<name>Evolutionary Bioinformatics Group - 
            Swiss Institute of Bioinformatics - 
            Department of Ecology and Evolution - 
            University of Lausanne</name>
		<url>http://bioinfo.unil.ch/</url>
	</organization>
	<developers>
		<developer>
			<name>Frederic Bastian</name>
			<email>frederic.bastian@unil.ch</email>
		</developer>
	</developers>
	<contributors>
		<contributor>
			<name/>
			<email/>
		</contributor>
	</contributors>
	<mailingLists>
		<mailingList>
			<name>bgee@isb-sib.ch</name>
		</mailingList>
	</mailingLists>
	
	<parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>7</version>
    </parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		<!-- The following proprties are used for integration tests -->
		
        <!-- Define here the JDBC Driver class name and connection URL 
             for the sql-maven-plugin and for integration test classes. -->
        <bgee.jdbc.driver.className>com.mysql.jdbc.Driver</bgee.jdbc.driver.className>
        <bgee.jdbc.connectionURL>jdbc:mysql://127.0.0.1/</bgee.jdbc.connectionURL> 
        
        <!-- Here we provide the paths to the SQL files to create the Bgee database -->
        <bgee.database.file.schema>
            ${basedir}/../../pipeline/pipeline/db_creation/bgeeSchema.sql
        </bgee.database.file.schema>
        <bgee.database.file.constraint>
	        ${basedir}/../../pipeline/pipeline/db_creation/bgeeConstraint.sql
        </bgee.database.file.constraint>
	    <bgee.database.file.index>
		    ${basedir}/../../pipeline/pipeline/db_creation/bgeeIndex.sql
	    </bgee.database.file.index>
	    <bgee.database.file.foreignkey>
		    ${basedir}/../../pipeline/pipeline/db_creation/bgeeForeignKey.sql
	    </bgee.database.file.foreignkey>
	    
	    <!-- here, we provide the name of the test Bgee database that should be 
	         populated with test data for integration tests of SELECT statements. 
	         Note that the name of this database MUST start with "bgeeIntegrationTest_"-->
        <bgee.database.test.name>bgeeIntegrationTest_select</bgee.database.test.name>
        <!-- and here, the path to the dump file containing the test data, used 
             to populate the database used for integration tests of SELECT statements -->
        <bgee.database.file.dump.test>
            ${basedir}/src/test/resources/sql/testDatDump.sql
        </bgee.database.file.dump.test>
        
        <!-- Here we provide the path to a SQL file defining and calling a procedure 
             to drop all databases used for integration tests. -->
        <bgee.database.file.drop.procedure>
            ${basedir}/src/test/resources/sql/dropTestDatabases.sql
        </bgee.database.file.drop.procedure>
	</properties>

	<repositories>
		<repository>
			<id>bgee-local-repository</id>
			<url>file://${basedir}/../m2_local_repository/repository</url>
		</repository>
	</repositories>

	<modules>
		<module>bgee-core</module>
		<module>bgee-webapp</module>
		<module>bgee-pipeline</module>
                <module>bgee-dao-api</module>
    <module>bgee-dao-sql</module>
  </modules>

	<!-- Dependencies needed for *all* sub-projects -->
	<dependencies>
        <!-- Logging system -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.0-beta7</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.0-beta7</version>
			<scope>compile</scope>
		</dependency>

        <!-- General useful library (e.g., defines StringUtils) -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.1</version>
            <scope>compile</scope>
        </dependency>
        
        <!-- Unit testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
        <!-- Mock object during unit testing -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<!-- Dependencies needed for some sub-projects -->
	<dependencyManagement>
		<dependencies>

			<!-- Needed for the pipeline -->
			<!-- Includes OWLools-Core, OBO2OWL, OWLAPI -->
			<dependency>
				<groupId>org.bbop</groupId>
				<artifactId>OWLTools-all</artifactId>
				<version>0.2.1-SNAPSHOT</version>
				<scope>compile</scope>
			</dependency>
			<!-- Used to generate our custom NCBI taxonomy ontology -->
            <dependency>
                <groupId>org.bbop</groupId>
                <artifactId>OWLTools-ncbi</artifactId>
                <version>0.2.1-SNAPSHOT</version>
                <scope>compile</scope>
            </dependency>
            <!-- Used to least common ancestors of species used in Bgee -->
            <dependency>
                <groupId>org.bbop</groupId>
                <artifactId>OWLTools-sim</artifactId>
                <version>0.2.1-SNAPSHOT</version>
                <scope>compile</scope>
            </dependency>
            
            <!-- To parse the OMA HOG data file -->
			<dependency>
				<groupId>sbc</groupId>
				<artifactId>orthoxml</artifactId>
				<version>0.1b</version>
				<scope>compile</scope>
			</dependency>
			
			<!-- To parse CSV/TSV files -->
			<dependency>
                <groupId>net.sf.supercsv</groupId>
                <artifactId>super-csv</artifactId>
                <version>2.1.0</version>
                <scope>compile</scope>
            </dependency>
			<!-- End for pipeline -->

			<!-- Needed for the webapp -->
			<dependency>
				<groupId>org.apache.tomcat</groupId>
				<artifactId>tomcat-servlet-api</artifactId>
				<version>7.0.35</version>
				<scope>provided</scope>
			</dependency>
			<!-- End for webapp -->

			<!-- Needed for the core layer -->
			<!-- Used to generate hashes -->
			<dependency>
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>
				<version>1.8</version>
				<scope>compile</scope>
			</dependency>

			<!-- End for the core layer -->
			
			<!-- Needed for the dao-api layer -->
			
            
			<!-- End for the dao-api layer -->

			<!-- Needed for the dao-sql layer -->
			<!-- JDBC logging library -->
			<dependency>
				<groupId>org.bgee.log4jdbc-log4j2</groupId>
				<artifactId>log4jdbc-log4j2-jdbc4.1</artifactId>
				<version>1.15</version>
				<scope>compile</scope>
			</dependency>
			<!-- The JDBC connector -->
			<dependency>
			    <!-- Properties defined in the <properties> section of this pom file 
			         (because they are used in different places) -->
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.26</version>
                <scope>compile</scope>
            </dependency>
		    
			<!-- End for the dao-sql layer -->
			
			<!-- Used for integration test using a real MySQL database. --> 
			<!-- Spring framework is used to execute the .sql files to create the database. -->
			<dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-test</artifactId>
                <version>3.2.5.RELEASE</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jdbc</artifactId>
                <version>3.2.5.RELEASE</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>3.2.5.RELEASE</version>
                <scope>test</scope>
            </dependency>

		</dependencies>
	</dependencyManagement>

	<build>
        <!-- plugins needed for ALL sub-modules -->
		<plugins>
            <!-- in order to compile with JDK 1.7 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			
			<!-- unit tests -->
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.14.1</version>
            </plugin>
            
            <!-- Generates sources and javadoc -->
            <plugin>
	          <groupId>org.apache.maven.plugins</groupId>
	          <artifactId>maven-source-plugin</artifactId>
              <version>2.2.1</version>
	          <executions>
		        <execution>
			      <id>attach-sources</id>
			      <goals>
				    <goal>jar</goal>
			      </goals>
		        </execution>
	         </executions>
           </plugin>
            <plugin>
	          <groupId>org.apache.maven.plugins</groupId>
	          <artifactId>maven-javadoc-plugin</artifactId>
              <version>2.9.1</version>
	          <executions>
		        <execution>
			      <id>attach-javadocs</id>
			      <goals>
				    <goal>jar</goal>
				    <goal>aggregate</goal>
			      </goals>
		        </execution>
	         </executions>
           </plugin>
		</plugins>
		
		
		<!-- Plugins needed for some sub-modules -->
		<pluginManagement>
		  <plugins>
            <!-- Integration test -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.16</version>
                
                <configuration>
                    <systemPropertyVariables>
                        <!-- Provides the System properties that Bgee will use to connect 
                             to a local MySQL database during integration tests -->
                        <!-- username and password should be provided in your settings.xml file, 
                             the other properties are defined in this pom.xml file. -->
                        <bgee.dao.jdbc.username>${bgee.database.root.username}</bgee.dao.jdbc.username>
                        <bgee.dao.jdbc.password>${bgee.database.root.password}</bgee.dao.jdbc.password>
                        
                        <!-- Besides the usual database connector, we also use the log4jdbc-log4j2 Driver, 
                             as logging SQL queries will be useful -->
                        <bgee.dao.jdbc.driver.names>
                            ${bgee.jdbc.driver.className},net.sf.log4jdbc.sql.jdbcapi.DriverSpy
                        </bgee.dao.jdbc.driver.names>
                        <!-- The connection URL is modified to use log4jdbc-log4j2 -->
                        <bgee.dao.jdbc.url>jdbc:log4${bgee.jdbc.connectionURL}</bgee.dao.jdbc.url>
                        
                        <!-- Here we provide the paths to the SQL files to create the Bgee database -->
                        <bgee.database.file.schema>${bgee.database.file.schema}</bgee.database.file.schema>
                        
                    </systemPropertyVariables>
                </configuration>
                
                <executions>
                     <execution>
                          <id>integration-test</id>
                          <goals>
                              <goal>integration-test</goal>
                              <goal>verify</goal>
                          </goals>
                      </execution>
                </executions>
            </plugin>
            
            <!-- Used during the pre-integration-test and post-integration-test 
                 phases of the  Maven Failsafe Plugin, used for integration tests. 
                 This allows to initialize or clean the MySQL database for integration 
                 tests using a real local database. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>sql-maven-plugin</artifactId>
                <version>1.5</version>
                <dependencies>
                    <!-- include the JDBC driver dependency here -->
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.26</version>
                    </dependency>
                </dependencies>
                
                <!-- common plugin configuration -->
                <configuration>
                    <!-- driver and url defined in this pom.xml -->
                    <driver>${bgee.jdbc.driver.className}</driver>
                    <url>${bgee.jdbc.connectionURL}</url>
                    <!-- username and password should be defined in your settings.xml file -->
                    <username>${bgee.database.root.username}</username>
                    <password>${bgee.database.root.password}</password>
                </configuration>
                
                <!-- the executions section binds the phases with some plugin goals 
                     and optional additional configuration parameters -->
                <executions>
                     <execution>
                         <id>sql-pre-integration-test</id>
                         <phase>pre-integration-test</phase>
                         <goals>
                             <goal>execute</goal>
                         </goals>
                         <!-- specific configuration for this execution -->
                         <configuration>
                             <!-- Include here the SQL scripts to create the DB, inject some test data -->
                         </configuration>
                     </execution>
                     <execution>
                         <id>sql-post-integration-test</id>
                         <phase>post-integration-test</phase>
                         <goals>
                             <goal>execute</goal>
                         </goals>
                         <configuration>
                             <!-- Include here the SQL scripts to drop the database -->
                         </configuration>
                     </execution>
                 </executions>
            </plugin>
            
          </plugins>
		</pluginManagement>
	</build>

</project>