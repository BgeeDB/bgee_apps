<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.bgee</groupId>
        <artifactId>bgee-applications</artifactId>
        <version>13</version>
    </parent>

    <artifactId>bgee-webapp</artifactId>
    <packaging>war</packaging>
    <name>bgee-webapp</name>

    <dependencies>

        <!-- Remove these dependencies as long as the webapp does not use 
            the actual Bgee API <dependency> <groupId>${project.groupId}</groupId> <artifactId>bgee-core</artifactId> 
            <version>${project.version}</version> <scope>compile</scope> </dependency> 
            <dependency> <groupId>${project.groupId}</groupId> <artifactId>bgee-dao-api</artifactId> 
            <version>${project.version}</version> <scope>compile</scope> </dependency> -->
        <!-- as long as bgee-dao-sql is the only service provider for bgee-dao-api, 
            we keep this dependency. When other service providers will be available, 
            this dependency might be changed for another service provider -->
        <!-- <dependency> <groupId>${project.groupId}</groupId> <artifactId>bgee-dao-sql</artifactId> 
            <version>${project.version}</version> <scope>compile</scope> </dependency> -->

        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-servlet-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>

        <dependency>
            <groupId>org.terracotta.bigmemory</groupId>
            <artifactId>bigmemory</artifactId>
        </dependency>

        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-ee</artifactId>
        </dependency>

        <!-- IMPORTANT : Keep this dependency (with 'provided' scope in bgee-application 
            pom.xml) even if it is not used, as ehcache-core is replaced by ehcache-ee 
            to use bigmemory. The reason is that it is somehow automatically included 
            with ehcache-web if not explicitly declared here, and conflicts with ehcache-ee 
            when deployed. -->
        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-core</artifactId>
        </dependency>

        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

    </dependencies>

    <properties>
        <!-- properties used to rename css and js files with version number, 
             to avoid caching issues with proxis/web browers. Corresponds by default 
             to the project version number, but we might have additional updates of these files. -->
        <css.version>${project.version}</css.version>
        <js.version>${project.version}</js.version>
        <!-- We will rename css and javascript files with version number using 
             maven-antrun-plugin. The files will be copied in the directory 
             used by maven-war-plugin to prepare the WAR packaging, 
             which is by default ${project.build.directory}/${project.build.finalName}. 
             But we declare this directory explicitly, to ensure proper communication 
             between maven-antrun-plugin and maven-war-plugin in any case, 
             and to be able to change the directory when running from Eclipse using m2e. -->
        <webapp.directory>${project.build.directory}/${project.build.finalName}</webapp.directory>
    </properties>
    
    <!-- We define a profile so that maven-antrun-plugin knows where to copy 
         the files when the webapp is run using m2e-wpt from Eclipse.  -->
    <profiles>
        <profile>
            <id>m2e</id>
            <!-- This profile is only active when the property "m2e.version"
                 is set, which is the case when building in Eclipse with m2e, 
                 see http://stackoverflow.com/a/21574285/1768736. -->
            <activation>
                <property>
                    <name>m2e.version</name>
                </property>
            </activation>
            <properties>
                <!-- change path where maven-antrun-plugin renames static files -->
                <webapp.directory>${project.build.directory}/m2e-wtp/web-resources/</webapp.directory>
                <!-- In order to have no extension in URLs, change tomcat context root -->
                <m2eclipse.wtp.contextRoot>/</m2eclipse.wtp.contextRoot>
            </properties>
        </profile>
    </profiles>
      
      
    <build>
        <finalName>bgee-webapp-${project.version}</finalName>
        
        <plugins>
        
            <!-- We use the maven-antrun-plugin to rename css and javascript files 
                 with version number, to avoid caching issues with proxis/web browsers. 
                 I couldn't find any other convenient way to rename files. 
                 Other solutions included: renaming the css and javascript directories, 
                 but this would need reconfiguring the server firewall at each release; adding 
                 a sub-directory with version number in css and javascript directories, 
                 but this causes problems of relative paths (e.g., images included in css files 
                 from the img/ directory). -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <!-- perform copy before the package phase, 
                             where maven-war-plugin builds the WAR file -->
                        <phase>prepare-package</phase>
                        <configuration>
                            <target>
                                <!-- We copy our resource files to the directory that 
                                     maven-war-plugin uses to prepare the packaging 
                                     of the WAR file. This corresponds to the parameter 
                                     webappDirectory of the maven-war-plugin, which is by default 
                                     ${project.build.directory}/${project.build.finalName}; 
                                     but we have declared this directory explicitly to ensure 
                                     proper communication between maven-antrun-plugin and 
                                     maven-war-plugin in any case. 
                                     Note that we will configure the maven-war-plugin to not copy 
                                     files in src/main/webapp/css/ and src/main/webapp/js/ itself. -->
                                 <!-- Explanation to select files to copy/rename: 
                                      http://stackoverflow.com/a/16092997/1768736 -->
                                 <copy todir="${webapp.directory}/css/">
                                     <fileset dir="src/main/webapp/css/">
                                         <include name="**/*.css" />
                                     </fileset>
                                     <mapper type="glob" from="*.css" to="*-${css.version}.css"/>
                                 </copy>
                                 <copy todir="${webapp.directory}/js/">
                                     <fileset dir="src/main/webapp/js/">
                                         <include name="**/*.js" />
                                     </fileset>
                                     <mapper type="glob" from="*.js" to="*-${js.version}.js"/>
                                 </copy>
                             </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    
                    <!-- We do no let the maven-war-plugin take care of the css and 
                         javascript files: in order to avoid caching issues with proxis/web browsers, 
                         we want to rename css and javascript files with version number, which is not 
                         easily doable with this plugin. See comments on the use 
                         of the maven-antrun-plugin above for more details. -->
                    <warSourceExcludes>css/,js/</warSourceExcludes>
                    <!-- maven-antrun-plugin will copy renamed javascript and css files 
                         in the directory that maven-war-plugin uses to prepare the packaging 
                         of the WAR file. We declare this directory explicitly to ensure 
                         proper communication between maven-antrun-plugin and maven-war-plugin 
                         in any case. -->
                    <webappDirectory>${webapp.directory}</webappDirectory>
                    <webResources>
                        <!-- We filter bgee-webapp.properties so that css version number 
                             and javacript version number are configured. -->
                        <resource>
                            <!-- this is relative to the pom.xml directory -->
                            <directory>src/main/resources/</directory>
                            <includes>
                                <include>bgee-webapp.properties</include>
                            </includes>
                            <!-- Activates filtering -->
                            <filtering>true</filtering>
                            <!-- override the destination directory for this resource, relative to the root of the WAR file -->
                            <targetPath>WEB-INF/classes</targetPath>
                        </resource>
                    </webResources>
                    
                    <attachClasses>true</attachClasses>
                </configuration>
            </plugin>
            
            <!-- In order to properly test the class BgeeProperties, we need to ensure 
                 that tests are run one at a time. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <forkCount>1</forkCount>
                    <reuseForks>false</reuseForks>
                </configuration>
            </plugin>
        </plugins>
        
        
        <!-- When running server from Eclipse, we need to tell m2e to execute 
             maven-antrun-plugin, to properly rename css and js files, by default it is not done. 
             We need to modify the life cycle mapping, see 
             https://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html. -->
        <pluginManagement>
            <plugins>
                <!-- This plugin is not a real one, it is only used by m2e to obtain 
                     config information. This is why it needs to be put in the section 
                     pluginManagement, otherwise Maven would try to download it. -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-antrun-plugin</artifactId>
                                        <versionRange>[1.0.0,)</versionRange>
                                        <goals>
                                            <goal>run</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <execute>
                                            <runOnIncremental>false</runOnIncremental>
                                        </execute >
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        
        
        <!-- In order to correctly filter bgee-webapp.properties even outside of the WAR file -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>bgee-webapp.properties</include>
                </includes>
            </resource>  
        </resources>
        
    </build>
</project>
